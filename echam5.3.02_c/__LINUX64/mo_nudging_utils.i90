# 1 "../modules/mo_nudging_utils.f90"
MODULE mo_nudging_utils
!BOP
! !MODULE: mo_nudging_utils (layer 3)

! !DESCRIPTION:
! contains utility functions used for nudging

! !REVISION HISTORY:
! Ingo Kirchner, MPI Hamburg, April-2001
! R. Johanni, IPP Garching, May-2002, parallel version
! Ingo Kirchner, MPI Hamburg, Aug 2002, revision

! !LAST CHANGE:
! Joachim Buchholz, MPI Mainz, 29. August 2004

!BOX
  IMPLICIT NONE

  PRIVATE
!EOX
! !PUBLIC MEMBER FUNCTIONS:

# 25

  PUBLIC :: cpbread


  PUBLIC :: swap64
  INTERFACE swap64
     MODULE PROCEDURE r_swap64
     MODULE PROCEDURE i_swap64
     MODULE PROCEDURE c_swap64
  END INTERFACE

!EOP

  INTEGER, PARAMETER, PUBLIC :: HEAD_LEN = 8   ! number of header words
  INTEGER, PARAMETER, PUBLIC :: WORD_LEN = 8   ! number of bytes in words,
! used for Cray binary files


CONTAINS

!======================================================================
!BOP
! !IROUTINE:  Nudg_Correl
! !INTERFACE:

# 177

!======================================================================



  SUBROUTINE r_swap64(rfield,idx)
    USE mo_kind, ONLY : dp
    REAL(kind=dp) :: rfield(:)
    INTEGER :: idx
    CALL swap64_main(rfield=rfield,idx=idx)
  END SUBROUTINE r_swap64

  SUBROUTINE i_swap64(ifield,idx)
    INTEGER :: ifield(:)
    INTEGER :: idx
    CALL swap64_main(ifield=ifield,idx=idx)
  END SUBROUTINE i_swap64

  SUBROUTINE c_swap64(cfield,idx)
    CHARACTER(len=8) :: cfield(:)
    INTEGER :: idx
    CALL swap64_main(cfield=cfield,idx=idx)
  END SUBROUTINE c_swap64

!BOP
! !IROUTINE:  swap64
! ! !INTERFACE:

  SUBROUTINE swap64_main(rfield,ifield,cfield,idx)

! !DESCRIPTION:
! swap 8-byte sequences of real, integer or 8-byte words
! from big to little endian

! !USES:
    USE mo_kind, ONLY : dp
    USE mo_exception, ONLY: finish

! !INPUT/OUTPUT PARAMETERS:
    REAL(kind=dp), OPTIONAL, INTENT(inout)    :: rfield(:)
    INTEGER, OPTIONAL, INTENT(inout)          :: ifield(:)
    CHARACTER(len=WORD_LEN), OPTIONAL, INTENT(inout) :: cfield(:)

! !INPUT PARAMETERS:
    INTEGER                                   :: idx  ! no of elements
!EOP

    INTEGER :: i, j, ierr
    CHARACTER(len=WORD_LEN),ALLOCATABLE :: ctr(:)
    CHARACTER(len=1)                    :: tmp(8)
    
    INTRINSIC   present, transfer   ! mz_jb_20041214

    ALLOCATE(ctr(idx))

    IF (PRESENT(rfield)) THEN
       ctr(1:idx) = TRANSFER(rfield(1:idx),ctr)

    ELSE IF(PRESENT(ifield)) THEN
       ctr(1:idx) = TRANSFER(ifield(1:idx),ctr)

    ELSE IF(PRESENT(cfield)) THEN
       ctr(1:idx) = cfield(1:idx)

    END IF

! switch bytes
    DO i=1,idx
       DO j=1,WORD_LEN
          tmp(j) = ctr(i)(j:j)
       END DO
       DO j=1,WORD_LEN
          ctr(i)(j:j) = tmp(9-j)
       END DO
    END DO

    IF (PRESENT(rfield)) THEN
       rfield(1:idx) = TRANSFER(ctr(1:idx),rfield)

    ELSE IF(PRESENT(ifield)) THEN
       ifield(1:idx) = TRANSFER(ctr(1:idx),ifield)

    ELSE IF(PRESENT(cfield)) THEN
       cfield(1:idx) = ctr(1:idx)

    END IF

    DEALLOCATE(ctr, stat=ierr)
    IF (ierr /= 0) CALL finish('swap64_main', &
         'Error while deallocating ctr.')

  END SUBROUTINE swap64_main



!======================================================================
!BOP
! !IROUTINE:  cpbread
! !INTERFACE:

  SUBROUTINE cpbread(unit,cfield,nbytes,ierr)

! !DESCRIPTION:
! read and swap service file header

! !USES:
    USE mo_kind, ONLY: dp
    USE mo_exception, ONLY: finish

! !INPUT PARAMETERS:
    INTEGER, INTENT(in)             :: unit       ! file ID
    INTEGER, INTENT(in)             :: nbytes     ! no of bytes to read

! !INPUT/OUTPUT PARAMETERS:
    CHARACTER(len=WORD_LEN), INTENT(inout) :: cfield(:)  ! service header

! !OUTPUT PARAMETERS:
    INTEGER, INTENT(out)            :: ierr       ! return code
!EOP

    REAL(kind=dp), ALLOCATABLE :: field(:)
    INTEGER :: no, DeallocStat

    EXTERNAL pbread
    INTRINSIC int, transfer

    no = INT(nbytes/WORD_LEN)
    ALLOCATE(field(no))

    CALL pbread(unit,field(1),nbytes,ierr)
    IF (ierr >= 0) THEN
       cfield = TRANSFER(field(1:no),cfield)
    END IF


    CALL swap64(cfield,no)


    DEALLOCATE(field, stat=DeallocStat)
    IF (DeallocStat /= 0) CALL finish('cpbread', &
         'Error while deallocating cpbread.')

  END SUBROUTINE cpbread

!======================================================================

END MODULE mo_nudging_utils
