# 1 "../modules/mo_netcdfstream.f90"
MODULE mo_netcdfstream
!--------------------------------------------------------------------------
! NetCDF stream output routines
!
! Authors:
! Andreas Rhodin DWD/MPI, October  2001: Template for NetCDF output routines
! Rolf Sander    MPICH,   November 2001: Code inserted into template
! Andreas Rhodin DWD/MPI, January  2001: write spectral fields, CF standard
! Andreas Rhodin,DWD/MPI, February 2001, changes for parallel/SCM mode
! Uwe Schulzweida MPIMET, September 2004: remove nf90_* interface
!--------------------------------------------------------------------------
!-------------
! Modules used
!-------------
  USE mo_kind,           ONLY: dp
  USE mo_filename,       ONLY: out_expname         ! experiment name
  USE mo_exception,      ONLY: finish              ! error abort routine
  USE mo_linked_list,    ONLY: t_stream,         & ! output stream data type
                               memory_info,      & ! stream entry data type
                               list_element,     & ! linked list element type
                               GAUSSIAN,         & ! Gaussian grid  indicator
                               SPECTRAL            ! spectral grid  indicator
  USE mo_netCDF,         ONLY: io_dim_ids,       & ! dimension table
                               io_ndim_ids,      & ! number of table entries
                               io_dim,           & ! table entry data type
                               io_get_varindx,   & ! get entry from name
                               io_put_att_text,  &
                               chunksize           ! buffer sizes for netCDF
# 31

  USE mo_control,        ONLY: nlev, nn            ! ECHAM grid

  USE mo_decomposition,  ONLY: dc=>local_decomposition! parallel grid info
  USE mo_time_control,   ONLY: start_date,       & ! reference for time axis
                               get_date_components ! split date into components

# 42


  IMPLICIT NONE
!----------------
! public entities
!----------------
  PRIVATE
  PUBLIC :: open_netcdfstream
  PUBLIC :: head1_netcdfstream
  PUBLIC :: head2_netcdfstream
  PUBLIC :: write_time_to_netcdfstream
  PUBLIC :: write_netcdfstream
  PUBLIC :: write_end_netcdfstream
  PUBLIC :: close_netcdfstream

  INTEGER :: k
  INTEGER :: vid                        ! variable IDs
  INTEGER :: tdimid                     ! time dimension id
  INTEGER :: timestep                   ! time step
  INTEGER :: dimids2d(3), dimids3d(4)   ! dimension IDs
  INTEGER :: lonid, latid, tid, psid    ! IDs for lon, lat, time and p_surf
  INTEGER :: tid2                       ! alternative time ID
  INTEGER :: levid, hyamid, hybmid      ! level midlayer IDs
  INTEGER :: ilevid, hyaiid, hybiid     ! level interface IDs
# 69

  INTEGER :: start2d(3), cnt2d(3), start3d(4), cnt3d(4)

  INTEGER :: nlon, ngl                  ! number of latitudes, longitudes
  INTEGER, PARAMETER :: mdims = 5       ! max. rank of fields to write

# 82

  INCLUDE 'netcdf.inc'



CONTAINS
!============================================================================
  SUBROUTINE open_netcdfstream (file, stream)

    USE mo_netcdf, ONLY: global_att ! global attributes

    USE mo_filename,    ONLY: NETCDF64


    CHARACTER (len=*) ,INTENT(in)    :: file    ! filename
    TYPE (t_stream)   ,INTENT(inout) :: stream  ! output stream description
    INTEGER :: londimid, latdimid, levdimid, ilevdimid !dimension IDs
    INTEGER :: year, month, day, hour, minute, second ! date/time variables
    INTEGER :: ncid                     ! NetCDF file IDs
    INTEGER :: i, old_mode
    INTEGER :: write_mode
    CHARACTER(80) :: start_date_string
!----------------------------------------------------------
! derive number of lon/lats for 3D-run or Single-Column-run
!----------------------------------------------------------
# 112

      nlon = dc% nlon
      ngl  = dc% nlat
# 117

!--------------------------------------------------------------
! open the netcdf file (nf_clobber = overwrite existing file)
!--------------------------------------------------------------


    IF ( stream%filetype == NETCDF64 ) THEN
      write_mode = NF_CLOBBER + NF_64BIT_OFFSET
    ELSE
      write_mode = NF_CLOBBER
    ENDIF
# 130

# 133

    CALL nf(nf__create(file, write_mode, 0, chunksize, ncid))


    stream%fileID = ncid

!------------------
! global attributes
!------------------

# 176


!------------------------------------------------
! due to performance reasons switch off fill mode
!------------------------------------------------
    CALL nf(nf_set_fill(stream%fileID, nf_nofill, old_mode))

    CALL io_put_att_text(ncid, nf_global, 'Conventions',& 
                                            'CF-1.0, + local extensions')
    CALL io_put_att_text(ncid, nf_global, 'title', TRIM(out_expname))
    DO i = 1, SIZE(global_att)
      IF (global_att(i)% name /= '') &
        CALL nf(nf_put_att_text(ncid, nf_global, global_att(i)%name, &
                          len(TRIM(global_att(i)%text)), global_att(i)%text ))
    END DO
    CALL nf(nf_put_att_int(ncid, nf_global, 'truncation', NF_INT, 1, nn))

!   CALL nf(nf_put_att(ncid, nf_global,'ylabel1', TRIM(ylabel1) ))
!   CALL nf(nf_put_att(ncid, nf_global,'ylabel2', TRIM(ylabel2) ))
!   CALL nf(nf_put_att(ncid, nf_global,'ylabel3', TRIM(ylabel3) ))
!   CALL nf(nf_put_att(ncid, nf_global,'ylabel4', TRIM(ylabel4) ))
!   CALL nf(nf_put_att(ncid, nf_global,'ylabel5', TRIM(ylabel5) ))
!   CALL nf(nf_put_att(ncid, nf_global,'ylabel6', TRIM(ylabel6) ))
!   CALL nf(nf_put_att(ncid, nf_global,'ylabel7', TRIM(ylabel7) ))
!   CALL nf(nf_put_att(ncid, nf_global,'ylabel8', TRIM(ylabel8) ))

!----------------------------------------------------------
! definition of the dimensions
! syntax: nf_def_dim(IN:ncid, IN:name, IN:len, OUT:dimid)
!----------------------------------------------------------
    CALL nf(nf_def_dim(ncid, 'lon',  nlon,           londimid))
    CALL nf(nf_def_dim(ncid, 'lat',  ngl,            latdimid))
    CALL nf(nf_def_dim(ncid, 'mlev', nlev,           levdimid))
    CALL nf(nf_def_dim(ncid, 'ilev', nlev+1,         ilevdimid))
    CALL nf(nf_def_dim(ncid, 'time', nf_unlimited, tdimid))


    dimids2d(:) = (/ londimid, latdimid,           tdimid /) ! 2d (3rd dim=t)
    dimids3d(:) = (/ londimid, latdimid, levdimid, tdimid /) ! 3d (4th dim=t)
    cnt2d(:)    = (/ nlon,     ngl,                1 /)
    cnt3d(:)    = (/ nlon,     ngl,      nlev,     1 /)
!---------------------------------------------------------------------
! definition of variables
! syntax: nf_def_var(IN:ncid, IN:name, IN:xtype, IN:ndims, IN:dimids, OUT:vid)
! coordinate variables
!---------------------------------------------------------------------

# 238

    CALL nf(nf_def_var(ncid, 'lon',      nf_double,  1, londimid,  lonid))
    CALL nf(nf_def_var(ncid, 'lat',      nf_double,  1, latdimid,  latid))
    CALL nf(nf_def_var(ncid, 'mlev',     nf_int,    1, levdimid,  levid))
    CALL nf(nf_def_var(ncid, 'ilev',     nf_int,    1, ilevdimid, ilevid))
    CALL nf(nf_def_var(ncid, 'time',     nf_double, 1, tdimid,    tid))
    CALL nf(nf_def_var(ncid, 'yyyymmdd', nf_double, 1, tdimid,    tid2))
!--------------------
! auxiliary variables
!--------------------
    CALL nf(nf_def_var(ncid, 'hyai', nf_double,  1, ilevdimid, hyaiid))
    CALL nf(nf_def_var(ncid, 'hybi', nf_double,  1, ilevdimid, hybiid))
    CALL nf(nf_def_var(ncid, 'hyam', nf_double,  1, levdimid,  hyamid))
    CALL nf(nf_def_var(ncid, 'hybm', nf_double,  1, levdimid,  hybmid))
    CALL nf(nf_def_var(ncid, 'aps',  nf_float,  3, dimids2d,  psid))


!----------------------------------------------------------
! store dimensions ids defined so far in table 'io_dim_ids'
!----------------------------------------------------------
    io_dim_ids (:)                      % var_id = 0
    io_dim_ids (:)                      % dim_id = 0
    io_dim_ids (IO_get_varindx ( 'lon'))% dim_id =  londimid
    io_dim_ids (IO_get_varindx ( 'lat'))% dim_id =  latdimid
    io_dim_ids (IO_get_varindx ( 'lev'))% dim_id =  levdimid
    io_dim_ids (IO_get_varindx ('ilev'))% dim_id = ilevdimid
!----------------------------------------------------------
! assign attributes
! syntax: io_put_att_text(IN:ncid, IN:vid, IN:name, IN:values)
! longitude
!----------------------------------------------------------

# 305

    CALL io_put_att_text(ncid, lonid,  'long_name', 'longitude')
    CALL io_put_att_text(ncid, lonid,  'units',     'degrees_east')
!---------
! latitude
!---------
    CALL io_put_att_text(ncid, latid,  'long_name', 'latitude')
    CALL io_put_att_text(ncid, latid,  'units',     'degrees_north')
!------------------------------
! levels and related quantities
!------------------------------

    CALL io_put_att_text(ncid, levid,  'long_name',    'hybrid level at layer midpoints')
    CALL io_put_att_text(ncid, levid,  'standard_name','hybrid_sigma_pressure')
    CALL io_put_att_text(ncid, levid,  'units',        'level')
    CALL io_put_att_text(ncid, levid,  'positive',     'down')
    CALL io_put_att_text(ncid, levid,  'formula',      'hyam hybm (mlev=hyam+hybm*aps)')
    CALL io_put_att_text(ncid, levid,  'formula_terms','ap: hyam b: hybm ps: aps')
    CALL io_put_att_text(ncid, levid,  'borders',      'ilev')

    CALL io_put_att_text(ncid, ilevid, 'long_name',    'hybrid level at layer interfaces')
    CALL io_put_att_text(ncid, ilevid, 'standard_name','hybrid_sigma_pressure')
    CALL io_put_att_text(ncid, ilevid, 'units',        'level')
    CALL io_put_att_text(ncid, ilevid, 'positive',     'down')
    CALL io_put_att_text(ncid, ilevid, 'formula',      'hyai hybi (ilev=hyai+hybi*aps)')
    CALL io_put_att_text(ncid, ilevid, 'formula_terms','ap: hyai b: hybi ps: aps')

    CALL io_put_att_text(ncid, hyaiid, 'long_name',    'hybrid A coefficient at layer interfaces')
    CALL io_put_att_text(ncid, hyaiid, 'units',        'Pa')
    CALL io_put_att_text(ncid, hybiid, 'long_name',    'hybrid B coefficient at layer interfaces')
    CALL io_put_att_text(ncid, hybiid, 'units',        '1')
    CALL io_put_att_text(ncid, hyamid, 'long_name',    'hybrid A coefficient at layer midpoints')
    CALL io_put_att_text(ncid, hyamid, 'units',        'Pa')
    CALL io_put_att_text(ncid, hybmid, 'long_name',    'hybrid B coefficient at layer midpoints')
    CALL io_put_att_text(ncid, hybmid, 'units',        '1')
    CALL io_put_att_text(ncid, psid,   'long_name',    'surface pressure')
    CALL io_put_att_text(ncid, psid,   'units',        'Pa')


!--------------------------------------------------------
! split reference time_days data type into its components
!--------------------------------------------------------
    CALL get_date_components(start_date    ,year,month,day,hour,minute,second)
    WRITE(start_date_string, &
      '("day since ",I4.4,"-",I2.2,"-",I2.2," ",I2.2,":",I2.2,":",I2.2)') &
      year,month,day,hour,minute,second

# 360

    CALL io_put_att_text(ncid, tid, 'long_name','time')
    CALL io_put_att_text(ncid, tid, 'units',     start_date_string)
    CALL io_put_att_text(ncid, tid, 'calendar', 'gregorian')

    CALL io_put_att_text(ncid, tid2, 'long_name','time')
    CALL io_put_att_text(ncid, tid2, 'units',    'days as %Y%m%d.%f')
    CALL io_put_att_text(ncid, tid2, 'calendar', 'gregorian')


  END SUBROUTINE open_netcdfstream
!----------------------------------------------------------------------------
  SUBROUTINE head1_netcdfstream (stream)
!----------------------------------------------------
! Write header information for specific output fields
!----------------------------------------------------

    TYPE (t_stream)     ,INTENT(in) :: stream    ! output stream description
    TYPE (list_element) ,POINTER    :: le
    TYPE (list_element) ,TARGET     :: first
    TYPE (memory_info)  ,POINTER    :: info

    INTEGER                :: ncid          ! NetCDF file IDs
    INTEGER                :: i
    INTEGER                :: n
    INTEGER                :: prec          ! float prec. (default)
    TYPE (IO_dim) ,POINTER :: p
    INTEGER                :: dimids(mdims) ! dimension IDs
    CHARACTER(len=5)       :: axis
    CHARACTER(len=32)      :: grid_type
    ncid = stream%fileID
    first%next_list_element => stream%first_list_element
!---------------------------------------
! 1st loop, define additional dimensions
!---------------------------------------
    le => first
    DO ! loop over elements in linked list
      le => le%next_list_element
      IF (.NOT.ASSOCIATED(le)) EXIT
      info => le%field%info
      IF (.NOT. info%lpost)      CYCLE ! skip if lpost flag not set
      IF (.NOT.(info%repr == GAUSSIAN .OR. info%repr == SPECTRAL)) CYCLE
!-----------------------------------------------------------
! Only a standard 2D field (nlon,ngl) and a
! standard 3D field (nlon,...,ngl)
! and spectral representations are allowed for netcdf
! output. For all other fields, info%lpost is set to .FALSE.
! surface pressure is written in any case.
!-----------------------------------------------------------
      n = info%ndim
      IF (info%repr == SPECTRAL .AND. info% gdim(n) == 1) n=n-1
      IF (info%lpost) THEN
!------------------------------------------
! define dimension (levels) if not yet done
!------------------------------------------
        DO i = 1, n
          p => IO_dim_ids (info% IO_var_indx (i))
          IF (p%single) CYCLE
          IF (p%dim_id == 0) THEN
# 427

            CALL nf (nf_def_dim (ncid, p%dim_name, p%dim_len,  p%dim_id))
            IF (ASSOCIATED (p% value)) THEN
              CALL nf(nf_def_var(ncid, p%dim_name, nf_float, 1, p%dim_id, p%var_id))
              IF (p%longname /= '') &
                CALL nf(nf_put_att_text(ncid, p%var_id, 'long_name',len(TRIM(p%longname)),p%longname))
              IF (p%units /= '') &
                CALL nf(nf_put_att_text(ncid, p%var_id, 'units',    len(TRIM(p%units)),p%units))

            ENDIF
          ENDIF
        END DO
      ENDIF
!----------------------------------------
! write message for grid types not written
!-----------------------------------------
      IF (.NOT.info%lpost) THEN
        PRINT *,'   ',TRIM(info%name), ' is non-standard: info%gdim_* = ' &
          ,info%gdim(1), info%gdim(2), info%gdim(3), info%gdim(4)
        CYCLE
      ENDIF
    END DO
!------------------------------------------
! 2nd loop, define variables and attributes
!------------------------------------------
    le => first
    DO ! loop over elements in linked list
      le => le%next_list_element
      IF (.NOT.ASSOCIATED(le)) EXIT
      info => le%field%info
      IF (.NOT. info%lpost)      CYCLE ! skip if lpost flag not set
      n = info% ndim
      SELECT CASE (info%repr)
      CASE (GAUSSIAN)
        grid_type = 'gaussian'
        IF ((n==4)) THEN
!------------------------------
! 4d data, transpose dimensions
!------------------------------
          p => IO_dim_ids (info% levelindx)
          dimids (1) = IO_dim_ids (info% IO_var_indx (1))% dim_id ! x
          dimids (2) = IO_dim_ids (info% IO_var_indx (4))% dim_id ! y
          dimids (3) = IO_dim_ids (info% IO_var_indx (2))% dim_id ! z
          dimids (4) = IO_dim_ids (info% IO_var_indx (3))% dim_id ! -
          axis       = 't-zyx'
        ELSE IF ((n==3)) THEN
!------------------------------
! 3d data, transpose dimensions
!------------------------------
          p => IO_dim_ids (info% levelindx)
          dimids (1) = IO_dim_ids (info% IO_var_indx (1))% dim_id
          dimids (2) = IO_dim_ids (info% IO_var_indx (3))% dim_id
          dimids (3) = IO_dim_ids (info% IO_var_indx (2))% dim_id
          axis       = 'tzyx'
        ELSE
!-------------
! regular data
!-------------
          DO i = 1, info% ndim
            dimids(i) = IO_dim_ids (info% IO_var_indx (i))% dim_id
          END DO
          axis      = 'tyx'
        ENDIF
      CASE (SPECTRAL)
        IF (info% gdim(1) == 1) THEN
          n=2
          dimids(1) = IO_dim_ids (info% IO_var_indx (2))% dim_id
          dimids(2) = IO_dim_ids (info% IO_var_indx (3))% dim_id
          axis      = 't--'
        ELSE
          dimids(1) = IO_dim_ids (info% IO_var_indx (2))% dim_id
          dimids(2) = IO_dim_ids (info% IO_var_indx (3))% dim_id
          dimids(3) = IO_dim_ids (info% IO_var_indx (1))% dim_id
          axis      = 'tz--'
        ENDIF
        p => IO_dim_ids (info% levelindx)
        grid_type = 'spectral, triangular truncation'
      CASE default
        CYCLE
      END SELECT
      dimids(n+1) = tdimid
!------------------------------
! define variable and attribute
!   'aps' is already defined
!------------------------------
      prec = NF_FLOAT
      IF (info% gribbits > 32) prec = NF_DOUBLE
      IF (info% name == 'aps') THEN
        vid = psid
      ELSE
# 534

        CALL nf(nf_def_var(ncid, info%name, prec, n+1, dimids(:n+1), vid))
        IF (info% longname/='') &
          CALL nf(nf_put_att_text(ncid, vid, 'long_name', len(TRIM(info%longname)), info%longname))
        IF (info% units/='') &
          CALL nf(nf_put_att_text(ncid, vid, 'units',     len(TRIM(info%units)), info%units))
      ENDIF
      IF (info% gribcode > 0) &
        CALL nf(nf_put_att_int(ncid, vid, 'code',  NF_INT, 1, info% gribcode))
      IF (info% gribtable > 0) &
        CALL nf(nf_put_att_int(ncid, vid, 'table', NF_INT, 1, info% gribtable))
      CALL   nf(nf_put_att_text(ncid, vid, 'axis',      len(TRIM(axis)), axis))
      CALL   nf(nf_put_att_text(ncid, vid, 'grid_type', len(TRIM(grid_type)), grid_type))
      IF (info%repr == SPECTRAL) THEN
        CALL nf(nf_put_att_int(ncid, vid, 'truncation', NF_INT, 1, nn))
      ENDIF

      info%IO_var_stid = vid ! store for later use
!------------------------------------------
! print tracer attributes into netcdf file:
!------------------------------------------
# 557

    END DO

  END SUBROUTINE head1_netcdfstream
!----------------------------------------------------------------------------
# 598

!----------------------------------------------------------------------------
  SUBROUTINE head2_netcdfstream (stream)

    USE mo_control,   ONLY: nvclev, vct    ! hyai, hybi
    USE mo_gaussgrid, ONLY: philon, philat ! longitudes, latitudes

    TYPE (t_stream),   INTENT(in)   :: stream   ! output stream description
    REAL(dp), ALLOCATABLE, DIMENSION(:) :: nlondata, ngldata
    REAL(dp), ALLOCATABLE, DIMENSION(:) :: hyam, hybm, hyai, hybi
    INTEGER                :: ncid  ! NetCDF file IDs
    INTEGER                :: i
    TYPE (io_dim) ,POINTER :: p

    ncid = stream%fileID

# 618

    CALL nf(nf_enddef(ncid))


!------------------
! define ECHAM grid
!------------------
    ALLOCATE (nlondata(nlon), ngldata(ngl))
    ALLOCATE (hyam(nlev),hybm(nlev),hyai(nlev+1),hybi(nlev+1))
# 632

      nlondata = philon (1:nlon)
      ngldata  = philat (1:ngl)
# 637

    hyai = vct(1:nvclev) ! [Pa] see ECHAM3 manual p. 17
    hybi = vct(nvclev+1:2*nvclev)
    FORALL (k=1:nlev)
      hyam(k) = (hyai(k)+hyai(k+1)) / 2._dp
      hybm(k) = (hybi(k)+hybi(k+1)) / 2._dp
    END FORALL
!-------------------------------------------------
! write the data of the grid
! syntax: nf_put_var(IN:ncid, IN:vid, IN:values)
!-------------------------------------------------

# 663

    CALL nf(nf_put_var_double(ncid, lonid,  nlondata))
    CALL nf(nf_put_var_double(ncid, latid,  ngldata))
    CALL nf(nf_put_var_int(ncid, levid,  (/(i,i=1,nlev)/) ))
    CALL nf(nf_put_var_int(ncid, ilevid, (/(i,i=1,nlev+1)/) ))
    CALL nf(nf_put_var_double(ncid, hyaiid, hyai))
    CALL nf(nf_put_var_double(ncid, hybiid, hybi))
    CALL nf(nf_put_var_double(ncid, hyamid, hyam))
    CALL nf(nf_put_var_double(ncid, hybmid, hybm))


!------------------------------------------
! write values of optional vertical levels
! stored in table 'IO_dim_ids'
!------------------------------------------
    DO i=1, IO_ndim_ids
      p => IO_dim_ids (i)
      IF (p%var_id /= 0) THEN
# 683

        CALL nf(nf_put_var_double(ncid, p%var_id, p%value))

     ENDIF

    END DO

    DEALLOCATE (nlondata, ngldata)
    DEALLOCATE (hyam,hybm,hyai,hybi)
# 695


  END SUBROUTINE head2_netcdfstream

!----------------------------------------------------------------------------
  SUBROUTINE write_time_to_netcdfstream (stream, aps)
    USE mo_time_control,    ONLY: next_date, get_date_components
    USE mo_time_conversion, ONLY: TC_get

    TYPE (t_stream)      ,INTENT(in) :: stream    ! output stream description
    REAL(dp)             ,INTENT(in) :: aps(:,:)  ! surface pressure

    INTEGER :: start_day, start_sec, present_day, present_sec
    INTEGER :: ncid                                   ! NetCDF file IDs
    INTEGER :: year, month, day, hour, minute, second ! date/time variables
    REAL(dp):: yyyymmdd
    ncid = stream%fileID
!-----------------------------------------
! convert time_days format into 2 integers
!-----------------------------------------
    CALL TC_get(start_date,    start_day,   start_sec)
    CALL TC_get(next_date,   present_day, present_sec)
!-------------------------------------
! get current length of time dimension
!-------------------------------------

# 726

    CALL nf(nf_inq_dimlen(ncid, tid, timestep))
    timestep = timestep + 1
    CALL nf(nf_put_vara_double(ncid, tid, (/timestep/) , 1,&
           (present_day-start_day)+(present_sec-start_sec)/86400._dp)) ! day since base


    start2d(:) = (/ 1, 1,    timestep /)
    start3d(:) = (/ 1, 1, 1, timestep /)
# 739

    CALL nf(nf_put_vara_double(ncid, psid, start2d, cnt2d, aps)) ! p_surf [Pa]

!--------------------------------
! write alternative time yyyymmdd
!--------------------------------
    CALL get_date_components(next_date,year,month,day,hour,minute,second)
    yyyymmdd = ABS(year)*10000+month*100+day&
             + (hour*3600+minute*60+second)/86400._dp
    IF (year<0) yyyymmdd = -yyyymmdd
# 751

    CALL nf(nf_put_vara_double(ncid, tid2, (/timestep/), 1, yyyymmdd))


    IO_dim_ids (:)% var_id = 0
    IO_dim_ids (:)% dim_id = 0

# 761


  END SUBROUTINE write_time_to_netcdfstream
!----------------------------------------------------------------------------
  SUBROUTINE write_netcdfstream (info, stream, xzy)

    TYPE (memory_info) ,INTENT(in) :: info         ! field description
    TYPE (t_stream)    ,INTENT(in) :: stream       ! output stream description
    REAL(dp)           ,INTENT(in) :: xzy(:,:,:,:) ! output field

    REAL(dp)    ,ALLOCATABLE :: xyz(:,:,:,:) ! transposed field
# 778

    INTEGER :: start (mdims)             ! start indices
    INTEGER :: cnt   (mdims)             ! count indices

    INTEGER :: jy, jz                    ! indices used for transposition
    INTEGER :: ncid                      ! NetCDF file ID
    INTEGER :: vid                       ! NetCDF variable ID
    INTEGER :: n                         ! rank of field to write


    ncid  = stream%fileID
    n     = info% ndim
!-----------------------------------------------------------
! variable ID may be invalid for no_cycle > 0 (rerun cycle).
!  request ID from NetCDF file in this case.
!-----------------------------------------------------------
    vid   = info%IO_var_stid
# 797

    IF (vid <=0) CALL nf(nf_inq_varid(ncid, info%name, vid))

!----------------------------------------
! write 3D,2D Gaussian or spectral fields
!----------------------------------------
    SELECT CASE (info%repr)
    CASE (GAUSSIAN)

# 819

      start = 1; start (n+1) = timestep


      SELECT CASE (n)
      CASE (3)
!-------------------------------------------------------------------
! The array xzy is sorted xzy(lon,lev,lat) - ONLY FOR single netcdf
! output. Parallel netcdf data hasn't been 'gather'd, so is still
! scrambled and needs to be 'reorder'd and unpacked -  but the
! COARDS convention for netcdf requires (lon,lat,lev). Applies
! to /all/ fields here.
!-------------------------------------------------------------------

# 858

        ALLOCATE (xyz (SIZE(xzy,1),SIZE(xzy,3),SIZE(xzy,2),1))
        FORALL (jy=1:SIZE(xzy,3),jz=1:SIZE(xzy,2))
          xyz(:,jy,jz,1)=xzy(:,jz,jy,1) ! switch lat and lev
        END FORALL
        cnt (1:4) = SHAPE(xyz)
        cnt (4)   = 1
        CALL nf(nf_put_vara_double(ncid, vid, start, cnt, xyz(:,:,:,1)))
        DEALLOCATE (xyz)


      CASE (4)
!-----------------------------------------------
! The array xzy is sorted xzy(lon,lev,?,lat) but
! we require (lon,lat,lev,?).
!-----------------------------------------------

# 902

        ALLOCATE (xyz (SIZE(xzy,1),SIZE(xzy,4),SIZE(xzy,2),SIZE(xzy,3)))
        FORALL (jy=1:SIZE(xzy,4),jz=1:SIZE(xzy,2))
          xyz(:,jy,jz,:)=xzy(:,jz,:,jy) ! switch lat and lev
        END FORALL
        cnt (1:4) = SHAPE(xyz)
        cnt (5)   = 1
        CALL nf(nf_put_vara_double(ncid, vid, start, cnt, xyz(:,:,:,:)))
        DEALLOCATE (xyz)


      CASE default

# 929

        cnt (1:4) = SHAPE(xzy)
        cnt (  3) = 1
        CALL nf(nf_put_vara_double(ncid, vid, start, cnt, xzy(:,:,1,1)))


      END SELECT

# 942


    CASE (SPECTRAL)
      IF (info% gdim(1) == 1) n=n-1

# 975

      start = 1; start (n+1) = timestep


      SELECT CASE (n)
      CASE (3)
        ALLOCATE (xyz (SIZE(xzy,2),SIZE(xzy,3),SIZE(xzy,1),1))
        FORALL (jz=1:SIZE(xzy,1))
          xyz(:,:,jz,1)=xzy(jz,:,:,1) ! switch lat and lev
        END FORALL

# 996

        cnt (1:4) = SHAPE(xyz)
        cnt ( n+1) = 1
        CALL nf(nf_put_vara_double(ncid, vid, start, cnt, xyz(:,:,:,1)))


        DEALLOCATE (xyz)
      CASE (2)
 
# 1013

        cnt (:n  ) = info% gdim (2:n+1)
        cnt ( n+1) = 1
        CALL nf(nf_put_vara_double(ncid, vid, start, cnt, xzy(1,:,:,1)))


      END SELECT

# 1027


    END SELECT
  END SUBROUTINE write_netcdfstream
!----------------------------------------------------------------------------
  SUBROUTINE write_end_netcdfstream (stream)
    TYPE (t_stream) ,INTENT(in) :: stream    ! output stream description

    INTEGER :: ncid                     ! NetCDF file IDs

    ncid = stream%fileID

# 1041

    CALL nf(nf_sync(ncid)) ! write buffer to file


  END SUBROUTINE write_end_netcdfstream
!----------------------------------------------------------------------------
  SUBROUTINE close_netcdfstream (stream)
    TYPE (t_stream) ,INTENT(in) :: stream
    INTEGER :: ncid                     ! NetCDF file IDs

    ncid = stream%fileID

# 1055

    CALL nf(nf_close(ncid))


    io_dim_ids(:)% dim_id = -1

  END SUBROUTINE close_netcdfstream
!----------------------------------------------------------------------------
  SUBROUTINE nf(status) ! turns nf_* function into subroutine + checks status
    INTEGER :: status
    IF (status /= nf_noerr) THEN
# 1068

      CALL finish('netcdf error',nf_strerror(status))

    ENDIF
  END SUBROUTINE nf
!----------------------------------------------------------------------------
END MODULE mo_netcdfstream
