\cancel mode verify
cancel data/all
cancel variable/all
cancel region
!cancel viewport
set mode interpolate

! ------------------------------------------------------------------
! THIS FERRET-JNL IS TO SAMPLE OFFLINE DATA ALONG A TRANSECT
! POSITION DATA EITHER IN S4D-FORMAT (ASCII) OR AS netCDF-FILE
! ------------------------------------------------------------------
! CHANGELOG
! mz_hr_20100615 if variables year, month, day, minute, hour, second
!                not in trajectory file: make own time variables from time
!                axis (+- 10 minutes precision)
! ------------------------------------------------------------------
! EXAMPLES:
! go s4d_sample.jnl /data/projects/MESSy_MBL_EVAL/mbl07/mc/O3.mc O3 /data/projects/CARIBIC_1/NC/POS/C1F_F_20000118.pos.nc C 
! go s4d_sample.jnl /data/projects/MESSy_MBL_EVAL/mbl07/mc/Cl.mc Cl /data/projects/CARIBIC_1/ASCII/POS/C1F_F_20000118.pos L 
! ------------------------------------------------------------------
QUERY/IGNORE $4%C|L|C<4th argument must be L or C%

! ------------------------------------------------------------------
! USER INTERFACE
! ------------------------------------------------------------------
! 3D model output
define symbol moddat = $1
! species/field to sample
define symbol spec = $2
! transect data file
define symbol s4dfile = $3
! sample mode: <C>urtain / <L>evel
define symbol smod = $4"C"

! ------------------------------------------------------------------
! SEPERATE PATH AND FILNAME
! ------------------------------------------------------------------
let s4dbase = {spawn:"basename ($s4dfile)"}
define symbol s4dbase = `s4dbase[i=1]`
let s4dpath = {spawn:"dirname ($s4dfile)"}
define symbol s4dpath = `s4dpath[i=1]`
cancel variable s4dbase
cancel variable s4dpath

! ------------------------------------------------------------------
! OUTPUT FILENEME
define symbol outname = ($s4dbase)_($spec)
! ------------------------------------------------------------------

! ------------------------------------------------------------------
! CHECK, IF netCDF, multi-netCDF or ASCII (S4D) file
! ------------------------------------------------------------------
let n = STRLEN("($s4dbase)")-1
define symbol ext = `SUBSTRING("($s4dbase)",n,2)`
cancel variable n
!
! +++++++++++
! +++ D=1 +++ trajectory
! +++++++++++
!mz_hr_20100615+
let mostr = {'JAN','FEB','MAR','APR','MAY','JUN',\
             'JUL','AUG','SEP','OCT','NOV','DEC'}
!let mostr = {'Jan','Feb','Mar','Apr','May','Jun',\
!             'Jul','Aug','Sep','Oct','Nov','Dec'}
!mz_hr_20100615-

IF ($ext%|mc>TRUE|nc>TRUE|*>FALSE%) THEN
   ! read transect information from netCDF-file
   set data "($s4dpath)/($s4dbase)"
   ! define (correct !) time axis for transect
   !mz_hr_20100615+
   !   check if time variables present
   !   if not define with internal time variable
   !   precision +- 10 minutes (depending on time axis and t0)
   let/d year   = 0
   let/d month  = 0
   let/d day    = 0
   let/d hour   = 0
   let/d minute = 0
   let/d second = 0
   define symbol year_exists   `year[d=1],return=shape`
   define symbol month_exists  `month[d=1],return=shape`
   define symbol day_exists    `day[d=1],return=shape`
   define symbol hour_exists   `hour[d=1],return=shape`
   define symbol minute_exists `minute[d=1],return=shape`
   define symbol second_exists `second[d=1],return=shape`

   IF `strcmp("($year_exists)","POINT") NE 0\
     AND strcmp("($month_exists)","POINT") NE 0\
     AND strcmp("($day_exists)","POINT") NE 0\
     AND strcmp("($hour_exists)","POINT") NE 0\
     AND strcmp("($minute_exists)","POINT") NE 0\
     AND strcmp("($second_exists)","POINT") NE 0` THEN
     say "Using internal time vars: year, month, day, hour, minute, second"
     ! all necessary time variables exist
   ELSE
     say "Note: Creating time variables from time axis"
     def sym torig = `lon,return=t0` ! e.g., 01-AUG-2006 14:00:00
     def sym torigy  = `substring("($torig)",8,4)`
     def sym torigms = `substring("($torig)",4,3)`
     def sym torigd  = `substring("($torig)",1,2)`
     def sym torigho = `substring("($torig)",13,2)`
     def sym torigmi = `substring("($torig)",16,2)`
     def sym torigse = `substring("($torig)",19,2)`
     ! convert month string into number
     REPEAT/RANGE=1:12:1/NAME=count (\
       define symbol cc = `count`;\
       def sym currmon = `mostr[i=($cc)]`;\
       IF `STRCMP("($torigms)","($currmon)") EQ 0` THEN;\
         define symbol torigm = `count` \
     )
       !IF `STRCMP(UPCASE("($torigms)"),"($currmon)") EQ 0` THEN;\
     let offset = DAYS1900(($torigy),($torigm),($torigd)) + ($torigho)/24 + ($torigmi)/60/24 + ($torigse)/3600/24
     let timevars = days1900toymdhms(T[gt=lon]/24/60+offset)
     let year   = reshape(timevars[k=1],T[gt=lon])
     let month  = reshape(timevars[k=2],T[gt=lon])
     let day    = reshape(timevars[k=3],T[gt=lon])
     let hour   = reshape(timevars[k=4],T[gt=lon])
     let minute = reshape(timevars[k=5],T[gt=lon])
     let second = reshape(timevars[k=6],T[gt=lon])
   ENDIF
   !mz_hr_20100615-
   
   define symbol l1 = `month[l=1]`
   define symbol mstr = `mostr[i=($l1)]`
   define symbol tzero = `day[l=1],zw=2`-($mstr)-`year[l=1],zw=4`
   define axis/from/t0="($tzero)"/name=tax/unit=hours \
     (DAYS1900(year,month,day) - DAYS1900(year[i=1],month[l=1],day[l=1]))*24 +\
           hour +minute/60 + second/3600
   !
   define variable/title="longitude"/unit=degrees_east tlon = lon[gt=tax@asn]
   define variable/title="latitude"/unit=degrees_north tlat = lat[gt=tax@asn]
   ! NOTE: pressure in netCDF files is in Pa
   define variable/title="pressure"/unit=hPa tpress = press[gt=tax@asn]/100
ELSE ! ASCII
   ! read transect information from ASCII-file (9 columns)
   ! time UTC !
   ! NOTE: for long files an index-grid must be defined ...
   let nlines = {spawn: "wc -l ($s4dfile)"}
   let tdim = `STRFLOAT(nlines[i=1])`
   define axis/x=1:`tdim`:1 xtdim
   define grid/x=xtdim g1d
   ! year month day hour minute second latitude longitude pressure [hPa]
   file/grid=g1d/var="qyy, qmo, qdy, qhr, qmi, qse, qlon, qlat, qpress" \
       "($s4dpath)/($s4dbase)"
   ! define time axis for transect
   define symbol l1 = `qmo[i=1]`
   define symbol mstr = `mostr[i=($l1)]`
   define symbol tzero = `qdy[i=1],zw=2`-($mstr)-`qyy[i=1],zw=4`
   define axis/from/t0="($tzero)"/name=tax/unit=hours \
          (DAYS1900(qyy,qmo,qdy) - DAYS1900(qyy[i=1],qmo[i=1],qdy[i=1]) )*24 +\
           qhr +qmi/60 + qse/3600
   ! put lat/lon/press information onto time axis
   define variable/title="longitude"/unit=degrees_east \
          tlon = RESHAPE(qlon, T[gt=tax])
   define variable/title="latitude"/unit=degrees_north \
          tlat = RESHAPE(qlat, T[gt=tax])
   ! NOTE: pressure in ascii S4D files is in hPa !!!
   define variable/title="pressure"/unit=hPa \
          tpress = RESHAPE(qpress, T[gt=tax])
   ! put time onto time axis
   define variable/title="year"/unit="UTC"   year   = RESHAPE(qyy, T[gt=tax])
   define variable/title="month"/unit="UTC"  month  = RESHAPE(qmo, T[gt=tax])
   define variable/title="day"/unit="UTC"    day    = RESHAPE(qdy, T[gt=tax])
   define variable/title="hour"/unit="UTC"   hour   = RESHAPE(qhr, T[gt=tax])
   define variable/title="minute"/unit="UTC" minute = RESHAPE(qmi, T[gt=tax])
   define variable/title="second"/unit="UTC" second = RESHAPE(qse, T[gt=tax])
ENDIF ! netCDF/ASCII
cancel symbol ext
cancel symbol l1, mstr, tzero
!mz_hr_20100617+
cancel symbol torig, torigy, torigms, torigd, torigho, torigmi, torigse
!mz_hr_20100617-
cancel variable mostr

! ------------------------------------------------------------------
! OPEN DATASET TO SAMPLE
! ------------------------------------------------------------------
! +++++++++++
! +++ D=2 +++
! +++++++++++
set data "($moddat)"
!set data "http://webmessy.mpch-mainz.mpg.de/las-FDS/LAS/($spec)"

! ------------------------------------------------------------------
! DEFINE GRIDS FOR LATER RE-IMPORT OF SAMPLED DATA (ASCII-OUTPUT)
! ------------------------------------------------------------------
define grid/t=T[gt=tlat[d=1]] gtime
define grid/t=T[gt=tlat[d=1]]/z=Z[gz=($spec)[d=2]] gtz

! ------------------------------------------------------------------
! NUMBER OF TIME STEPS ALONG TRANSECT
! ------------------------------------------------------------------
let n = `tlat[d=1,l=@NGD]`

! ------------------------------------------------------------------
! VARIABLE UNIT AND DIMENSIONS
! ------------------------------------------------------------------
  define symbol specunit = `($spec),RETURN=UNIT`
  define symbol specdim  = `($spec),return=shape`
!mz_hr_20100617-

! ==================================
! <L>evel mode
! ==================================
IF ($smod%|L>TRUE|*>FALSE%) THEN
  define symbol tmpname = ($outname).dat
  ! remove old dataset first
  sp rm ($tmpname)
  !mz_hr_20100617+ 
  if `STRINDEX("($specdim)","Z") LE 0` then
    say "Note: no Z dimension present"
    define variable/unit="($specunit)" MR = ($spec)[d=2]
    ! loop over time steps
    repeat/l=1:`n` (\
      define symbol ttime = `T[gt=tlat[d=1]],return=tstart` ;\
      list/quiet/append/file="($tmpname)"/nohead/format="(e12.4)" \
      MR[d=2,x=`tlon[d=1]`,y=`tlat[d=1]`,t="($ttime)"] ;\
    )
  else
    say "Note: Z dimension present"
    ! TRANSFORM TO VERTICAL PRESSURE AXIS; ONLY FOR <L>evel-SAMPLING
    let/d=2 pressure = (hyam[d=2] + hybm[d=2]*aps[d=2,k=1])/100  ! hPa
    ! overwritten later with 1-point axis if line mode
    define axis/z/depth/from/name=pax (hyam[d=2] + hybm[d=2]*101325.0)/100
    define variable/unit="($specunit)" MR = \
      ZAXREPLACE(($spec)[d=2],pressure[d=2], Z[gz=pax]) 
    repeat/l=1:`n` (\
      define symbol ttime = `T[gt=tlat[d=1]],return=tstart` ;\
      define axis/quiet/z/depth/from/name=pax `tpress[d=1]`;\
      list/quiet/append/file="($tmpname)"/nohead/format="(e12.4)" \
      MR[d=2,x=`tlon[d=1]`,y=`tlat[d=1]`,z=`tpress[d=1]`,t="($ttime)"] ;\
    )
  endif
  !mz_hr_20100617- 

  ! re-read ascii-output and convert to netCDF file
  ! +++++++++++
  ! +++ D=3 +++
  ! +++++++++++
  file/var="q($spec)"/grid=gtime ($tmpname)
  define variable/unit="($specunit)"/title="($spec)" ($spec)=q($spec)
  say Output to ($outname)_L.nc
  save/clobber/file="($outname)_L.nc" \
      ($spec)[d=3], tlon[d=1], tlat[d=1], tpress[d=1]
  cancel data 3
  cancel variable n, MR
  sp rm ($tmpname)
ENDIF

! ==================================
! <C>urtain mode
! ==================================
IF ($smod%|C>TRUE|*>FALSE%) THEN
  if `STRINDEX("($specdim)","Z") LE 0` then
    say "ERROR: variable has no Z dimension, no curtain possible"
    exit
  endif
  define symbol tmpname = ($outname).dat
  define symbol tmpname_aps = ($outname)_aps.dat
  ! remove old datasets first
  sp rm ($tmpname_aps)
  sp rm ($tmpname)
  ! loop over time steps
  repeat/l=1:`n` (\
     define symbol ttime = `T[gt=tlat[d=1]],return=tstart` ;\
     list/quiet/append/file="($tmpname)"/nohead/format="(e12.4)" \
     ($spec)[d=2,x=`tlon[d=1]`,y=`tlat[d=1]`,t="($ttime)"] ;\
     list/quiet/append/file="($tmpname_aps)"/nohead/format="(e12.4)" \
     aps[d=2,x=`tlon[d=1]`,y=`tlat[d=1]`,t="($ttime)"] ;\
     )  
  ! +++++++++++
  ! +++ D=3 +++
  ! +++++++++++
  file/var="qaps"/grid=gtime ($tmpname_aps)
  ! +++++++++++
  ! +++ D=4 +++
  ! +++++++++++
  file/var="q($spec)"/order=zt/grid=gtz ($tmpname)
  define variable/unit="Pa"/title="surface pressure" aps=qaps[d=3]
  define variable/unit="($specunit)"/title="($spec)" ($spec)=q($spec)[d=4]
  say Output to ($outname)_C.nc
  save/quiet/clobber/file="($outname)_C.nc" \
    aps[d=3], ($spec)[d=4], tlon[d=1], tlat[d=1], tpress[d=1],\
    hyam[d=2], hybm[d=2], year[d=1], month[d=1], day[d=1], hour[d=1],\
    minute[d=1], second[d=1]
  cancel data 3
  cancel data 4
  cancel variable n, ($spec)
  sp rm ($tmpname_aps)
  sp rm ($tmpname)
ENDIF

! -------------------------
!exit/COMMAND_FILE
! -------------------------
