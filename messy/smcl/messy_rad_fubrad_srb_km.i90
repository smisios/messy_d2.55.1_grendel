# 1 "messy_rad_fubrad_srb_km.f90"
! **********************************************************************************
MODULE  messy_rad_fubrad_srb_km
!
! PURPOSE:
!    Provide a parameterization of the short wave heating rates due to
!    absorption of UV radiation in the Schumann-Runge bands (175 - 205 nm)
!    by oxygen.
!
! REFERENCE:
!    G.A. Koppers and D.P. Murtagh, Model studies of the influence of O2
!    photodissociation parameterizations in the Schumann-Runge bands on
!    ozone related photolysis in the upper atmosphere,
!    Ann.Geophys., 14 68-79, doi:10.1007/s00585-996-0068-9, 1996.
!
! CODE HISTORY:
!    Original code is from TUV5.2 (Tropospheric Ultraviolet and Visible (TUV)
!    Radiation Model) file la_srb.f, provided by NCAR.
!
!    Markus Kunze, FU-Berlin, 09/2015: converted to f90 and implemented in FUBRAD
!
!********************************************************************************
  
  USE messy_main_constants_mem, ONLY: dp
  USE messy_rad_fubrad_mem
  
  IMPLICIT NONE
  PRIVATE
  SAVE
  
  PUBLIC :: fubrad_srb_km_schum      &
          , fubrad_srb_km_init_xs    &
          , fubrad_srb_km_mem_ini    &
          , fubrad_srb_km_mem_clean
!
  REAL(dp), DIMENSION(:,:), ALLOCATABLE :: ac, bc
!

! Interface of public subroutines
  
  INTERFACE fubrad_srb_km_schum
     MODULE PROCEDURE fubrad_srb_km_schum
  END INTERFACE
  
  INTERFACE fubrad_srb_km_init_xs
     MODULE PROCEDURE fubrad_srb_km_init_xs
  END INTERFACE
  
  INTERFACE fubrad_srb_km_mem_ini
     MODULE PROCEDURE fubrad_srb_km_mem_ini
  END INTERFACE
  
  INTERFACE fubrad_srb_km_mem_clean
     MODULE PROCEDURE fubrad_srb_km_mem_clean
  END INTERFACE
  
! Interface of module private subroutines
  
  INTERFACE fubrad_srb_km_effxs
     MODULE PROCEDURE fubrad_srb_km_effxs
  END INTERFACE
  
  INTERFACE fubrad_srb_km_calc_params
     MODULE PROCEDURE fubrad_srb_km_calc_params
  END INTERFACE
  
  
CONTAINS
!
!=============================================================================*
!
  SUBROUTINE fubrad_srb_km_schum(nbdim, nproma, nswlev, nswlevp1, tlev, flux_srb)

!-----------------------------------------------------------------------------*
!=  PURPOSE:                                                                 =*
!=  Calculate the equivalent absorption cross section of O2 in the SR bands. =*
!=  The algorithm is based on parameterization of G.A. Koppers, and          =*
!=  D.P. Murtagh [ref. Ann.Geophys., 14 68-79, 1996]                         =*
!=  Final values do include effects from the Herzberg continuum.             =*
!-----------------------------------------------------------------------------*
!=  Code history:
!=  Original code is from TUV5.2 (Tropospheric Ultraviolet and Visible (TUV) !
!=  Radiation Model) file la_srb.f, provided by NCAR.
!=
! INPUT:
! ------
!=  NSWLEV   - INTEGER, number of full pressure levels                    (I)=*
!=  NSWLEVP1 - INTEGER, number of half pressure levels                    (I)=*
!=  TLEV    - temperature at each level                                   (I)=*
    INTEGER,                             INTENT(in) :: nbdim, nproma
    INTEGER,                             INTENT(in) :: nswlev
    INTEGER,                             INTENT(in) :: nswlevp1
    REAL(dp), DIMENSION(nbdim,nswlevp1), INTENT(in) :: tlev
! OUTPUT:
! -------
!=  flux_srb  - REAL, flux in SR bands at each specified vertical layer   (O)=*
    REAL(dp), DIMENSION(nbdim,nswlevp1), INTENT(out) :: flux_srb

! LOCAL:
! ------
!=  O2COL   - REAL, slant overhead O2 column (molec/cc) at each specified  =*
!=            altitude                                                     =*
!=  SECCHI  - ratio of slant to vertical o2 columns                        =*
!=  DTO2    - REAL, optical depth due to O2 absorption at each specified   =*
!=            vertical layer at each specified wavelength                  =*
!=  O2XSK   - REAL, molecular absorption cross section in SR bands at      =*
!=            each specified wavelength.  Includes Herzberg continuum      =*
    INTEGER                                     :: i, j, k, ktop, ktop1, kbot
    REAL(dp), DIMENSION(nswlevp1,nsrb_km)       :: trans
    REAL(dp), DIMENSION(nbdim)                  :: x
    REAL(dp), DIMENSION(nbdim,nswlevp1)         :: secchi
    REAL(dp), DIMENSION(nbdim,nswlevp1)         :: o2col
    REAL(dp), DIMENSION(nbdim,nswlevp1)         :: o2col1
    REAL(dp), DIMENSION(nbdim,nswlevp1,nsrb_km) :: dto2, o2xsk
    REAL(dp), DIMENSION(nbdim,nsrb_km)          :: xs
    REAL(dp), DIMENSION(nsrb_km), PARAMETER     ::  &
         xslod = (/ 6.2180730E-21_dp, 5.8473627E-22_dp, 5.6996334E-22_dp, &
                    4.5627094E-22_dp, 1.7668250E-22_dp, 1.1178808E-22_dp, &
                    1.2040544E-22_dp, 4.0994668E-23_dp, 1.8450616E-23_dp, &
                    1.5639540E-23_dp, 8.7961075E-24_dp, 7.6475608E-24_dp, &
                    7.6260556E-24_dp, 7.5565696E-24_dp, 7.6334338E-24_dp, &
                    7.4371992E-24_dp, 7.3642966E-24_dp /)
    
    flux_srb(:,:) = 0._dp
!------------------------------------------
!  Calculate incremental optical depths and
!  the vertical flux profiles in the
!  Schumann-Runge bands.
!------------------------------------------
    DO j = 1, nproma
    
!------------------------------------------
!  Initialize cross sections to values
!  at large optical depth
!------------------------------------------
       DO k = 1, nswlevp1
          o2xsk(j,k,:) = xslod(:)
          
          o2col(j,k)  = po2c(j,k) * przsec(j)
          o2col1(j,k) = MAX(o2col(j,k),EXP(38._dp))
          secchi(j,k) = o2col1(j,k)/po2c(j,k)
       END DO
       secchi(j,1) = secchi(j,2)
       
!------------------------------------------
! - Calculate cross sections
!    Set smallest O2col = exp(38.) molec cm-2
!    to stay in range of parameterization
!    given by Koppers et al. at top of atm.
!------------------------------------------
    
       ktop = 1
       kbot = nswlevp1

       DO k = nswlevp1, 1, -1  ! loop for alt from bottom to top
          
          x(j)  = LOG(o2col1(j,k))
       
          IF (x(j) < 38.0_dp) THEN
             ktop1 = k - 1
             ktop  = MAX(ktop1,ktop)
          ELSE IF (x(j) > 56.0_dp) THEN
             kbot = k
          ELSE
             CALL fubrad_srb_km_effxs( x(j), tlev(j,k), xs(j,:) )   
             o2xsk(j,k,:) = xs(j,:)
          END IF
          IF (ldb_first) PRINT *,'x(',j,') =',x(j), k,' kbot = ',kbot,' ktop = ',ktop
       
       END DO                    !! finish loop for alt
      
!------------------------------------------
!  fill in cross section where X is out of range
!  by repeating edge table values
!------------------------------------------
       
       dto2(j,1,:) = 0._dp ! set optical depth to zero
       
! flux at the uppermost level
       flux_srb(j,1) = SUM(zFsrb(:))
       
!alt:DO k = 2, nswlevp1   ! loop for alt from top to bottom
       trans(1,:) = 1._dp
       alt:DO k = 2, nswlevp1   ! loop for alt from top to bottom
       
          wavl:DO i = 1, nsrb_km   ! loop over wavelength
              
!... calculate an optical depth weighted by density
!sm:  put in mean value estimate, if in shade
             IF (ldb_first) PRINT *,' o2col1(',j,',',k,')=',o2col1(j,k), &
                                    ' o2col1(j,k-1)/o2col1(j,k) = ',o2col1(j,k-1)/o2col1(j,k)
             IF (ABS(1._dp - o2col1(j,k-1)/o2col1(j,k)) <= 2._dp*precis) THEN
                PRINT *,'ABS(1._dp - o2col1(j,k-1)/o2col1(j,k))=', &
                                        ABS(1._dp - o2col1(j,k-1)/o2col1(j,k)), &
                                        '2._dp*precis=',2._dp*precis
                dto2(j,k,i) = o2xsk(j,k-1,i)*o2col1(j,k-1)/nswlev
             
             ELSE
                IF (ldb_first) PRINT *, &
                  'o2xsk(j,k-1,i)*o2col1(j,k-1)=',o2xsk(j,k-1,i)*o2col1(j,k-1), &
                  'o2xsk(j,k,i)  *o2col1(j,k)  =',o2xsk(j,k,i)  *o2col1(j,k)
                IF (ldb_first) PRINT *, &
                  ' LOG( o2xsk(j,k-1,i)/o2xsk(j,k,i))',LOG(o2xsk(j,k-1,i)/o2xsk(j,k,i)), &
                  ' LOG(o2col1(j,k-1)/ o2col1(j,k))',LOG(o2col1(j,k-1)/o2col1(j,k))
                dto2(j,k,i) = ABS( &
                     ( o2xsk(j,k-1,i)*o2col1(j,k-1) - o2xsk(j,k,i)*o2col1(j,k) ) &
                     / ( 1._dp + LOG(o2xsk(j,k-1,i)/o2xsk(j,k,i)) / &
                                 LOG(o2col1(j,k-1)/o2col1(j,k)) ) )
             
!... change to vertical optical depth
                IF (ldb_first) PRINT *,'      dto2(',j,',',k,',',i,')  =',dto2(j,k,i)
                IF (ldb_first) PRINT *,'    secchi(',j,',',k,') = ',secchi(j,k), &
                                       '    secchi(',j,',',k-1,') = ',secchi(j,k-1)     
                dto2(j,k,i) = 2._dp * dto2(j,k,i) / (secchi(j,k)+secchi(j,k-1))
                IF (ldb_first) PRINT *,'      dto2(',j,',',k,',',i,')  =',dto2(j,k,i)
             END IF
             
! calculate the transmissivity at level k
             trans(k,i) = trans(k-1,i) * EXP( -dto2(j,k,i) )
             IF (ldb_first) PRINT *,'dto2(j,',k,',',i,')=',dto2(j,k,i)
             IF (ldb_first) PRINT *,'trans(',k,',',i,')=',trans(k,i)
! calculate the flux at level k
             
             flux_srb(j,k) = flux_srb(j,k) + zFsrb(i) * trans(k,i)
             IF (ldb_first) PRINT *,'flux_srb_diff1(',j,',',k,')=',zFsrb(i) * trans(k,i)
             IF (ldb_first) PRINT *,'flux_srb_diff2(',j,',',k,')=',zFsrb(i) * EXP(-o2xsk(j,k,i)*o2col1(j,k))
             
!flux_srb(j,k) = flux_srb(j,k) + zFsrb(i) * EXP(-o2xsk(j,k,i)*o2col1(j,k))
          END DO wavl
       
       END DO alt
       ldb_first = .FALSE.
    END DO
    RETURN
  END SUBROUTINE fubrad_srb_km_schum
!
!=============================================================================*
!
!
!=============================================================================*
!
  SUBROUTINE fubrad_srb_km_effxs( x, t, xs )

! Subroutine for evaluating the effective cross section
! of O2 in the Schumann-Runge bands using parameterization
! of G.A. Koppers, and D.P. Murtagh [ref. Ann.Geophys., 14
! 68-79, 1996]
!
! method:
! -------
! ln(xs) = A(X)[T-220]+B(X)
! X      = log of slant column of O2
! A,B calculated from Chebyshev polynomial coeffs
! AC and BC using NR routine chebev.
! Assume interval is 38 < ln(NO2) < 56.
!
! Revision History:
! -----------------
!  drm 2/97  initial coding
!
!-------------------------------------------------------------
    REAL(dp),                     INTENT(in)  :: x, t
    REAL(dp), DIMENSION(nsrb_km), INTENT(out) :: xs
!
    REAL(dp), DIMENSION(nsrb_km) :: a, b
    
    CALL fubrad_srb_km_calc_params( x, a, b )

    xs(:) = EXP( a(:)*( t - 220._dp) + b(:) )
    
    RETURN
  END SUBROUTINE fubrad_srb_km_effxs
!
!=============================================================================*
!
  SUBROUTINE fubrad_srb_km_calc_params( x, a, b )
    
!-------------------------------------------------------------
!
! calculates coefficients (A,B), used in calculating the
! effective cross section, for 17 wavelength intervals
! as a function of log O2 column density (X)
! Wavelength intervals are defined in WMO1985
!
!-------------------------------------------------------------
!
    REAL(dp),                     INTENT(in) :: x
!
    REAL(dp), DIMENSION(nsrb_km), INTENT(out) :: a, b
!
    INTEGER :: i
!
! Assume valid interval is 38 < ln(NO2) < 56 (limits of Koppers and Murtagh)
! ln_n_o2_min  -  logarithm of the minimum column density of O2
! ln_n_o2_max  -  logarithm of the maximum column density of O2
!
    REAL(dp), PARAMETER :: ln_n_o2_min = 38.0_dp
    REAL(dp), PARAMETER :: ln_n_o2_max = 56.0_dp
!
! call Chebyshev Evaluation routine to calc A and B from
! set of 20 coefficients for each wavelength
!
    DO i = 1, nsrb_km 
       a(i) = CHEBEV(ln_n_o2_min, ln_n_o2_max, ac(:,i), sr%ntr, x)
       b(i) = CHEBEV(ln_n_o2_min, ln_n_o2_max, bc(:,i), sr%ntr, x)
    END DO
    
    RETURN
  CONTAINS
!========================================================
    FUNCTION chebev(a,b,c,m,x) RESULT(coeffs)
!-------------------------------------------------------------
!
! Chebyshev evaluation algorithm
! See Numerical recipes p193
!
!-------------------------------------------------------------
      INTEGER,                INTENT(in) :: m
      REAL(dp),               INTENT(in) :: a, b
      REAL(dp), DIMENSION(m), INTENT(in) :: c
      REAL(dp),               INTENT(in) :: x
      
      REAL(dp) :: coeffs
      
      INTEGER  :: j
      REAL(dp) :: d, dd, sv
      REAL(dp) :: y, y2
      
      IF ((x-a)*(x-b) > 0._dp) THEN
!WRITE(6,*) 'X NOT IN RANGE IN CHEBEV', X
         coeffs = 0.0_dp
         
      ELSE
      
         d  = 0._dp
         dd = 0._dp
         y  = (2._dp * x - a-b)/ (b-a)
         y2 = 2._dp * y
         DO j = m, 2, -1
            sv = d
            d = y2 * d - dd + c(j)
            dd = sv
         END DO
         coeffs = y * d - dd + 0.5_dp*c(1)

      END IF
      RETURN
    END FUNCTION chebev
!=============================================================================*
  END SUBROUTINE fubrad_srb_km_calc_params
!
!=============================================================================*
!
  SUBROUTINE fubrad_srb_km_init_xs(status)
!-------------------------------------------------------------
! initializes the Chebyshev polynomial coeffs necessary to
! calculate O2 effective cross-sections
!-------------------------------------------------------------
    INTEGER, INTENT(out) :: status
!
    status = -1
!
! ChebcoefA
! ---------
    ac( 1,:)=(/ 1.01299248635769E-2, 1.24629074707627E-2, 1.17507819086313E-2, &
                6.00254954770207E-3, 3.83285153657198E-3, 4.19552065432072E-3, &
                8.68364516645670E-3, 6.61816960200667E-3, 5.45611511915922E-3, &
                9.37877129763365E-3, 3.73193318955600E-3, 4.25203470513225E-3, &
                1.11884698271751E-2, 1.22261606156826E-2, 6.58877100795507E-3, &
                2.15090042911470E-3, 7.19559495337307E-4 /)
    ac( 2,:)=(/ 4.92775812745094E-3, 6.69141532853246E-3, 6.74931425601244E-3, &
                3.04163340479136E-3, 9.24751046113670E-4,-6.93289621267468E-5, &
                3.65910609252751E-3,-2.16037646168843E-4,-3.62338265404105E-3, &
               -1.00316479802132E-3,-2.14893510565162E-3,-4.02387976646423E-3, &
               -8.15672241151333E-3,-8.48923996090889E-3,-4.33475291356444E-3, &
               -1.66029925458133E-3,-4.14013979025185E-4 /)
    ac( 3,:)=(/-3.21849016472697E-3,-3.61971813254058E-3,-1.71727291308343E-3, &
               -1.34564808104187E-3,-2.41587474010885E-3,-1.42452772706747E-3, &
                8.17305641248822E-4, 1.40400865348056E-4,-1.36525114066899E-3, &
               -3.17051570164040E-4,-1.24988087918609E-3, 2.52219004323706E-4, &
                5.05659403279424E-3, 4.96717588976026E-3, 2.63612275011837E-3, &
                1.18536711670458E-3, 4.26325888838619E-4 /)
    ac( 4,:)=(/-2.22120410762727E-3,-4.54070419073105E-3,-2.43034074082971E-3, &
               -3.05988360196352E-5,-7.50405946746469E-4,-8.60366330016404E-4, &
                6.05895183980465E-4,-1.17858254816383E-3,-3.60865192487836E-3, &
               -6.08240137808025E-4,-4.27354173734784E-3,-4.03935508802533E-3, &
               -5.70040382444859E-3,-4.58617974072695E-3,-2.21549510024488E-3, &
               -9.12618008442223E-4,-2.08456083782949E-4 /)
    ac( 5,:)=(/-1.10634672455490E-3,-3.08012403547764E-3,-1.69446307700127E-3, &
                5.44505892321467E-4, 1.21707023936324E-4, 2.08176628802903E-4, &
                1.35609519202262E-3, 6.11105002462864E-4,-6.19182654190809E-4, &
                7.72952742408961E-4,-1.69471651315689E-3,-6.14812306594104E-4, &
                1.00072589702904E-3, 9.75968316197395E-4, 6.86321815010160E-4, &
                2.50681827310473E-4, 1.18910058517940E-4 /)
    ac( 6,:)=(/-6.02349755354226E-4,-4.75269422167912E-4, 1.54578810906969E-4, &
                2.08055030270771E-6,-4.61681847809814E-5,-2.03694653464481E-4, &
                5.94568497035652E-4,-5.91504394833464E-5,-4.34186658822000E-4, &
                3.81475576432422E-4,-7.89800076745450E-4,-5.09671117470134E-5, &
                8.59443447552621E-4, 7.16903537977487E-4, 2.27582058869302E-4, &
                8.15023668110371E-5, 6.36485347058624E-5 /)
    ac( 7,:)=(/-5.37680811248720E-4,-1.22243043733761E-4, 5.68136456422508E-4, &
               -7.89729601820000E-5,-2.61324108578265E-4,-4.58434136817232E-4, &
               -3.00284940749407E-4,-6.30654161795974E-4,-8.04820447228849E-4, &
                5.25643583387136E-4,-5.69808646105230E-4,-2.03741161385551E-4, &
               -9.43752093007788E-6,-2.38989494391717E-4,-1.27341394545510E-4, &
               -7.89691766840406E-5,-1.15519412702270E-6 /)
    ac( 8,:)=(/-3.52014612872154E-4,-4.09653090173379E-4, 3.64597071893513E-4, &
                3.69826360838488E-4, 1.65143301273929E-5, 9.22639737837017E-5, &
               -4.62242780486122E-4,-6.64311737637036E-5,-2.74336402071640E-4, &
                3.68972570868209E-4,-1.37156908749603E-4, 1.97204317373689E-5, &
                5.51758916117251E-4, 5.50234690308571E-4, 3.65001847967505E-4, &
                1.30603119032457E-4, 4.96710745210294E-5 /)
    ac( 9,:)=(/-9.80006880126894E-5,-1.66980593348853E-4,-2.06275508389808E-4, &
                7.07908038748428E-5,-4.79382542835083E-5, 1.48562714457512E-4, &
               -4.73478634376079E-4,-5.13576233061031E-5,-1.56403053551912E-4, &
               -5.59872714802623E-4,-1.71511404914781E-4,-4.50919003924355E-4, &
               -7.82699382398278E-4,-4.12657798733562E-4,-2.65894341282547E-4, &
               -1.02240068372339E-4,-2.94810397463152E-5 /)
    ac(10,:)=(/ 3.91476933145896E-4, 1.74320826772600E-4,-5.53898862563074E-4, &
               -1.94968146388419E-4,-1.20529599371366E-4,-9.61433397606015E-5, &
               -2.47934163780883E-4,-1.01171179267112E-4, 6.06320354563650E-5, &
               -5.48409123439342E-4, 2.25794410653180E-5,-1.26005616039038E-4, &
               -2.89456947939470E-4,-2.35748302657157E-4,-1.30875501781702E-4, &
               -4.33807872468606E-5,-2.04631523956778E-5 /)
    ac(11,:)=(/ 3.75378964236006E-4, 4.28983476012945E-4, 4.62679454358295E-5, &
               -1.45655474625528E-4,-1.09635375338257E-5,-1.65128527441993E-4, &
               -8.93372707650997E-5,-1.79289738298394E-4, 2.66725837718695E-5, &
               -1.69998835190199E-4,-3.77506330551114E-5, 8.93721517059021E-5, &
                1.96798151591793E-4, 4.87558972963598E-5, 4.99247180414386E-5, &
                2.61714540101821E-5, 4.90748880110914E-6 /)
    ac(12,:)=(/-4.47879792773165E-5, 3.58218618202955E-4, 4.87788696773350E-4, &
               -9.36690485104918E-5, 2.28264107136056E-5,-5.45398215763271E-5, &
               -1.07828869658988E-4,-2.05253978492692E-4,-6.46504267933778E-5, &
               -1.51356452988693E-5,-1.83850948815234E-4,-2.71678818535293E-5, &
               -1.76409503183095E-5,-8.55180987855420E-5,-3.80796154786367E-5, &
               -1.57990307343425E-5,-5.67996175959706E-6 /)
    ac(13,:)=(/-8.38850537547842E-5,-1.90981372725219E-4,-2.66857368842466E-5, &
                8.34015081636608E-5, 5.02281145600136E-5, 1.23535690363497E-4, &
                1.23617821373045E-4, 1.20076554594561E-4, 1.36898175696842E-4, &
                1.34360307129100E-4, 4.12766639783513E-5, 5.80054256715812E-5, &
                2.83752870018361E-5, 1.29317804749007E-5, 1.90326791198459E-5, &
                2.62594153355167E-6,-2.67588825408893E-6 /)
    ac(14,:)=(/ 7.58726091589779E-5,-2.11607097298838E-4,-2.99255974823609E-4, &
                1.31876877276227E-4, 8.85566769284196E-5, 1.69545091921464E-4, &
                3.66481574019417E-4, 3.39650665409863E-4, 2.58964777458459E-4, &
                2.16271728277206E-4, 2.40967245190404E-4, 1.30286993226036E-4, &
                5.05548741784878E-5, 8.10621932032518E-5, 2.66042261500843E-5, &
                9.48948127188487E-6, 1.94920335161441E-6 /)
    ac(15,:)=(/ 5.04318377352320E-5, 2.90705938823521E-4, 1.42124335980043E-4, &
                2.86733734355948E-6, 5.17402586410753E-5, 4.28201747126877E-5, &
                2.07662509637885E-4, 1.41964104841463E-4, 8.20863861008547E-5, &
                1.60308176418766E-4, 1.04495644336566E-4, 3.37692035827786E-5, &
               -5.16218606207985E-5,-1.54078370542265E-5,-2.81887205346720E-5, &
               -1.00102888609399E-5,-1.04792957245081E-6 /)
    ac(16,:)=(/-1.30119049572386E-4, 2.19530138565460E-5, 1.01043260656297E-4, &
               -5.55848673684523E-5,-1.05991442978848E-4,-1.32499873870984E-4, &
               -1.37203343911096E-4,-9.84250364126638E-5,-1.66028941748664E-4, &
               -4.66493875137530E-5,-1.12460977106821E-4,-3.93697191611864E-5, &
                2.88155551970704E-5, 2.44258608290693E-5, 3.08026319544297E-5, &
                1.39703633976751E-5, 5.66770722798537E-6 /)
    ac(17,:)=(/-1.33143141283654E-4,-4.01182536734268E-4,-2.06791257369332E-4, &
               -6.40066064079292E-5,-1.50590596604161E-4,-1.65795601787977E-4, &
               -3.18799575325102E-4,-2.10368321859278E-4,-2.86052090814337E-4, &
               -2.66584218479693E-4,-2.05384247237816E-4,-1.01442463346757E-4, &
               -3.08373643065352E-7, 1.30732860270655E-5, 1.63951899594394E-5, &
                9.96544440567959E-6, 4.32715751230717E-6 /)
    ac(18,:)=(/ 8.90793162398040E-5,-3.48842986568343E-5, 7.05252678017132E-5, &
               -1.81727118615527E-5, 6.29041242063977E-5, 1.55489578901324E-5, &
               -1.72551663126796E-4,-1.65707358974032E-4,-1.16959294246044E-4, &
               -1.29552005091682E-4,-8.39542481116951E-5,-8.10016208561137E-5, &
               -6.93029578542337E-5,-6.11984141869470E-5,-4.17931187257636E-5, &
               -1.68605529324850E-5,-4.63129254058003E-6 /)
    ac(19,:)=(/ 6.90536253387108E-5, 2.11630875128321E-4, 1.31553868413903E-4, &
                7.14663256076165E-5, 1.26962651847862E-4, 1.40164876938798E-4, &
                1.98595487745479E-4, 1.17976356705185E-4, 2.26951873628423E-4, &
                2.00681111891754E-4, 1.87522658961825E-4, 9.08265137695707E-5, &
                8.83697211975232E-5, 4.75925880891737E-5, 2.42550577240763E-5, &
                5.04466652273550E-6, 4.18031902427174E-7 /)
    ac(20,:)=(/-1.12801055365708E-4, 5.28662712895311E-6,-1.85644807061180E-4, &
                7.83157447585836E-5,-2.21114532905631E-5, 6.84259503032081E-5, &
                3.31698509398848E-4, 2.60581320617348E-4, 2.72320234216750E-4, &
                2.18566958210431E-4, 2.33914193813689E-4, 1.07638246845454E-4, &
                2.91644864773843E-5, 1.97788322111592E-5, 5.66097878618166E-6, &
               -1.07585015030054E-6,-4.08798939588451E-7 /)
!
! ChebcoefB
! ---------
    bc( 1,:)=(/-9.03405380249023E+1,-9.32331466674805E+1,-9.38624114990234E+1, &
               -9.40979385375977E+1,-9.53380661010742E+1,-9.64176712036133E+1, &
               -9.70311737060547E+1,-9.86436004638672E+1,-1.00008163452148E+2, &
               -1.01109031677246E+2,-1.01378021240234E+2,-1.02960906982422E+2, &
               -1.05169540405273E+2,-1.06506790161133E+2,-1.06438453674316E+2, &
               -1.06576293945313E+2,-1.06590606689453E+2 /)
    bc( 2,:)=(/-2.04607248306274E+0,-3.16542029380798E+0,-2.94678354263306E+0, &
               -2.90637922286987E+0,-3.08791637420654E+0,-2.85797882080078E+0, &
               -2.59352040290833E+0,-2.53565645217896E+0,-2.25186800956726E+0, &
               -2.08251047134399E+0,-2.06618666648865E+0,-1.33756220340729E+0, &
               -2.05385372042656E-1, 3.91759157180786E-1, 1.96900457143784E-1, &
                1.14275127649307E-1, 4.23569343984127E-2 /)
    bc( 3,:)=(/ 5.51205933094025E-1, 6.36242449283600E-1, 5.78123450279236E-1, &
                3.53586196899414E-1, 2.75621891021729E-1, 5.82633949816227E-2, &
               -7.02516734600067E-2,-3.29384177923203E-1,-5.15524744987488E-1, &
               -4.85277205705643E-1,-7.50329852104187E-1,-7.49491631984711E-1, &
               -9.18219983577728E-1,-6.77003324031830E-1,-3.80969196557999E-1, &
               -1.42852753400803E-1,-3.67124788463116E-2 /)
    bc( 4,:)=(/ 2.60696977376938E-1, 3.92134398221970E-1, 3.88009339570999E-1, &
                5.53819775581360E-1, 5.76462447643280E-1, 6.37516021728516E-1, &
                6.00104868412018E-1, 6.50445640087128E-1, 6.24725878238678E-1, &
                4.80242609977722E-1, 4.74477708339691E-1, 4.20921385288239E-1, &
                6.42125666141510E-1, 4.52103555202484E-1, 2.41586506366730E-1, &
                9.71360057592392E-2, 2.93931346386671E-2 /)
    bc( 5,:)=(/-1.93879470229149E-1,-1.44075363874435E-1,-1.46021634340286E-1, &
               -1.17143325507641E-1,-7.62977302074432E-2,-5.31233027577400E-2, &
                1.51219470426440E-2, 5.22664524614811E-2, 6.04026541113853E-2, &
                1.35131850838661E-1, 2.16930583119392E-1, 9.05516892671585E-2, &
               -2.00856730341911E-1,-2.57609605789185E-1,-1.38386294245720E-1, &
               -6.31433874368668E-2,-1.93247962743044E-2 /)
    bc( 6,:)=(/-9.22096222639084E-2,-9.32125896215439E-2,-7.06443488597870E-2, &
               -1.41220405697823E-1,-1.42043337225914E-1,-1.48185417056084E-1, &
               -1.63790091872215E-1,-1.05886295437813E-1,-8.32023620605469E-2, &
               -6.87109902501106E-2,-2.05568270757794E-3, 5.24549372494221E-2, &
                1.73608526587486E-1, 1.86408057808876E-1, 1.03819482028484E-1, &
                4.07376587390900E-2, 1.06352576985955E-2 /)
    bc( 7,:)=(/ 1.00352182984352E-1, 1.78563371300697E-2, 4.50663156807423E-2, &
                4.82261255383492E-2, 3.23133505880833E-2, 2.88811642676592E-2, &
                7.44506483897567E-3,-2.72549111396074E-2,-6.38432949781418E-2, &
               -5.55102564394474E-2,-1.36293798685074E-1,-1.28325313329697E-1, &
               -1.39732763171196E-1,-7.43092522025108E-2,-3.92660833895206E-2, &
               -1.38555541634560E-2,-4.23215143382549E-3 /)
    bc( 8,:)=(/ 6.35678973048925E-3,-1.04700718075037E-2,-5.11583872139454E-2, &
               -2.35740207135677E-2,-2.09645349532366E-2,-1.07717551290989E-2, &
                1.09807569533587E-2, 1.48481624200940E-2, 1.68268624693155E-2, &
                3.11791598796844E-2,-2.08189357072115E-2,-2.17408537864685E-2, &
               -2.03941967338324E-2,-2.68692187964916E-2,-1.25685445964336E-2, &
               -3.03270015865564E-3,-5.30433084350079E-4 /)
    bc( 9,:)=(/-2.17597074806690E-2, 2.95549202710390E-2, 2.61675920337439E-2, &
                2.02542319893837E-2, 1.73386912792921E-2,-1.11621981486678E-2, &
               -2.19006221741438E-2,-1.32330541964620E-3,-7.21160322427750E-3, &
                4.63733728975058E-3, 3.36209423840046E-2, 5.23338168859482E-2, &
                7.47282952070236E-2, 3.96465323865414E-2, 1.88454631716013E-2, &
                8.03583581000566E-3, 2.94468132779002E-3 /)
    bc(10,:)=(/-2.89956964552402E-2,-1.89487375319004E-2, 1.82473622262478E-2, &
                2.82890461385250E-2, 1.59379933029413E-2, 2.98001021146774E-2, &
                1.75820365548134E-2, 1.13022615551017E-4,-2.22005303949118E-2, &
               -1.78773850202560E-2,-9.53965261578560E-3,-5.80802280455828E-3, &
               -2.88790408521891E-2,-2.95525956898928E-2,-1.77583992481232E-2, &
               -8.62030964344740E-3,-2.27004685439169E-3 /)
    bc(11,:)=(/ 1.62216145545244E-2,-7.35823297873139E-3,-1.20020741596818E-2, &
               -1.71883609145880E-2,-1.51440035551786E-2, 8.23272950947285E-3, &
                2.66449004411697E-2, 1.75962075591087E-2, 3.61178927123547E-2, &
                2.27369107306004E-2, 5.07326703518629E-3,-1.91919889766723E-3, &
                1.84939019382000E-2, 2.94464193284512E-2, 1.79644040763378E-2, &
                6.08613993972540E-3, 1.67103821877390E-3 /)
    bc(12,:)=(/ 2.04767286777496E-2, 1.38181876391172E-2, 5.89253241196275E-3, &
               -1.34796556085348E-2, 1.95670663379133E-3,-1.83217860758305E-2, &
               -1.29447951912880E-2,-1.01386746391654E-2, 1.07328006997705E-2, &
                5.96637604758143E-3, 8.16291105002165E-3,-1.15864919498563E-2, &
               -2.48577445745468E-2,-1.23819792643189E-2,-6.42563076689839E-3, &
               -2.50944681465626E-3,-8.28482676297426E-4 /)
    bc(13,:)=(/-1.73658542335033E-2,-4.41416772082448E-3,-1.09326224774122E-2, &
                3.62913589924574E-3, 5.24273794144392E-3,-2.45161238126457E-3, &
               -1.87923610210419E-2,-9.08265728503466E-3,-1.76986623555422E-2, &
               -1.76265612244606E-2, 2.54143308848143E-3, 6.11819559708238E-3, &
                1.10148615203798E-3,-5.74772898107767E-3,-2.94574745930731E-3, &
               -3.81184683647007E-4,-3.05434485198930E-4 /)
    bc(14,:)=(/-3.30401235260069E-3, 3.95223614759743E-4,-7.78053374961019E-3, &
                3.82174691185355E-3,-8.28419532626867E-3, 1.80326553527266E-3, &
               -1.82372261770070E-3, 1.66344910394400E-3,-1.30304899066687E-2, &
               -1.13650029525161E-2,-1.26592088490725E-2, 5.31047722324729E-3, &
                1.27701479941607E-2, 4.14400268346071E-3, 2.03659082762897E-3, &
                1.42290280200541E-3, 4.29603038355708E-4 /)
    bc(15,:)=(/ 1.15237347781658E-2, 1.29860453307629E-3, 1.53118809685111E-2, &
                8.42229928821325E-4,-2.36440217122436E-3,-3.95141821354628E-3, &
                1.82844023220241E-3,-2.44091334752738E-3,-1.23355697724037E-4, &
                4.96777752414346E-3,-1.24136367812753E-2,-8.36107321083546E-3, &
               -6.47783745080233E-3,-4.01446921750903E-3,-2.75633274577558E-3, &
               -1.20228028390557E-3,-2.43537855567411E-4 /)
    bc(16,:)=(/-1.41748634632677E-3,-4.56838915124536E-3, 4.07321099191904E-3, &
                2.48882333835354E-5, 5.31308772042394E-3, 6.07215240597725E-3, &
                7.20542855560780E-3, 4.07648412510753E-3, 9.89387370646000E-3, &
                1.11154261976480E-2, 9.66589339077473E-3, 1.84082484338433E-4, &
                1.91333214752376E-3, 5.59650314971805E-3, 3.34151485003531E-3, &
                8.58944142237306E-4, 2.40759894950315E-4 /)
    bc(17,:)=(/-4.72612958401442E-3, 2.84727034159005E-3,-1.05885416269302E-2, &
               -9.53577051404864E-4, 2.31126416474581E-3, 6.78080320358276E-3, &
                1.03801088407636E-2, 8.88806674629450E-3, 8.33328813314438E-3, &
                3.27587174251676E-3, 1.46281374618411E-2, 5.08535699918866E-3, &
               -2.58093187585473E-3,-1.48067332338542E-3,-7.84205738455057E-4, &
               -6.30583963356912E-4,-1.96340362890624E-4 /)
    bc(18,:)=(/ 5.22618938703090E-4, 8.98296944797039E-3, 5.80691616050899E-4, &
                4.93692758027464E-4, 2.38728336989880E-3,-3.74749070033431E-3, &
               -6.37304387055337E-4, 5.57112856768072E-4, 3.49754258058965E-3, &
               -7.73543084505945E-4, 2.40311096422374E-3, 4.62298654019833E-3, &
                3.93378455191851E-3, 9.72851878032088E-4, 3.83802602300420E-4, &
                2.24662348045968E-4, 4.22856719524134E-5 /)
    bc(19,:)=(/ 1.13617908209562E-3,-2.68963188864291E-3, 5.59028051793575E-3, &
                7.50306702684611E-4,-1.32964784279466E-3,-4.99235698953271E-3, &
               -9.60146356374025E-3,-8.29594302922487E-3,-8.98257363587618E-3, &
               -4.97137242928147E-3,-1.06695694848895E-2,-4.60129836574197E-3, &
               -1.75894307903945E-3,-2.07512849010527E-3,-1.03575247339904E-3, &
               -1.48790379171260E-4,-2.52488480327884E-5 /)
    bc(20,:)=(/-1.01459189318120E-3,-1.59506835043430E-2,-5.30823273584247E-3, &
               -2.48248502612114E-3,-8.78510251641273E-3,-6.64978986606002E-4, &
               -6.67825061827898E-3,-5.01646054908633E-3,-1.19734387844801E-2, &
               -6.57283561304212E-3,-9.10557806491852E-3,-5.62931969761848E-3, &
               -8.16778454463929E-4, 8.30528151709586E-4, 6.40276586636901E-4, &
                5.16644853632897E-4, 1.72790678334422E-4 /)

    status = 0
    RETURN
  END SUBROUTINE fubrad_srb_km_init_xs
!
! =============================================================================
!
  SUBROUTINE fubrad_srb_km_mem_ini (nbdim,klev)
!
    INTEGER, INTENT(in) :: nbdim,klev
!
    ALLOCATE (ac(ntr_max,nsrb), bc(ntr_max,nsrb))
!
    RETURN
  END SUBROUTINE fubrad_srb_km_mem_ini
!
! =============================================================================
!
  SUBROUTINE fubrad_srb_km_mem_clean
!
    DEALLOCATE (ac, bc)
!
  END SUBROUTINE fubrad_srb_km_mem_clean
  
END MODULE  messy_rad_fubrad_srb_km
