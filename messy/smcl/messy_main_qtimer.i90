# 1 "messy_main_qtimer.f90"
! **********************************************************************
MODULE messy_main_qtimer
! **********************************************************************
  
  USE messy_main_constants_mem,      ONLY: DP, SP, I8

  IMPLICIT NONE
  PRIVATE

  CHARACTER(LEN=*), PARAMETER, PUBLIC :: modstr = 'qtimer'
  CHARACTER(len=*), PARAMETER, PUBLIC :: modver = '3.0'

  PUBLIC :: DP, SP, I8

  INTEGER, PARAMETER, PUBLIC :: C_WALL = 1
  INTEGER, PARAMETER, PUBLIC :: C_CPU  = 2
  INTEGER, PARAMETER, PUBLIC :: C_USER = 3
  INTEGER, PARAMETER, PUBLIC :: C_SYS  = 4
  INTEGER, PARAMETER, PUBLIC :: C_REAL = 5
  INTEGER, PARAMETER, PUBLIC :: NCLOCKS = 5

! CTRL NAMELIST PARAMETERS
! QUEUE TIME LIMIT (hh,mi,se)
  INTEGER, DIMENSION(3), PUBLIC :: QTIME  = (/0, 0, 0/)
! QUEUE CLOCK TYPE ('wall','cpu ','user','sys ')
  CHARACTER(LEN=4),      PUBLIC :: QCLOCK = 'wall'
! USABLE FRACTION OF QUEUE TIME LIMIT
  REAL(DP),              PUBLIC :: QFRAC  = 0.90

  PUBLIC   :: qtimer_read_clock
!PRIVATE :: cpu_second
  PUBLIC   :: main_qtimer_read_nml_ctrl
  PUBLIC   :: sec2hhmmssms
  PUBLIC   :: deep_thought

CONTAINS

! -----------------------------------------------------------------------
! PUBLIC SUBROUTINES
! -----------------------------------------------------------------------

! -----------------------------------------------------------------------
  SUBROUTINE qtimer_read_clock(QC)

    IMPLICIT NONE

! I/O
    REAL(DP), DIMENSION(NCLOCKS), INTENT(OUT) :: QC

    CALL cpu_second(QC(C_CPU), QC(C_USER), QC(C_SYS))
    CALL wall_second(QC(C_WALL), QC(C_REAL))

  END SUBROUTINE qtimer_read_clock
! -----------------------------------------------------------------------

! -----------------------------------------------------------------------
  ELEMENTAL SUBROUTINE sec2hhmmssms(sec, hh, mm, ss, ms)

    IMPLICIT NONE

! I/O
    REAL(DP), INTENT(IN)  :: sec
    INTEGER,  INTENT(OUT) :: hh, mm, ss, ms

! LOCAL
    INTEGER :: isec

    isec = INT(sec)

    hh = isec / 3600
    mm = (isec-hh*3600) / 60
    ss = isec - hh*3600 - mm*60
    ms = INT( (sec-REAL(isec,DP)) * 1000.0_DP )
    
  END SUBROUTINE sec2hhmmssms
! -----------------------------------------------------------------------

! -----------------------------------------------------------------------
! PRIVATE SUBROUTINES
! -----------------------------------------------------------------------

! -----------------------------------------------------------------------
  SUBROUTINE cpu_second(cpu, user, sys)

    IMPLICIT NONE

# 89


!!$#ifndef __GFORTRAN__
!!$    EXTERNAL  :: etime
!!$#endif
    INTRINSIC :: REAL

!  ------------------------------------------------
!  returns elapsed cpu time since start of job (sec)
!  ------------------------------------------------
! etime version; etime is common on many 1 systems
! however, it is not standard fortran and not included in NAG fortran
! thus, it had to be explicitly coded here

! I/O
    REAL(DP), INTENT(OUT)  :: cpu,user,sys

! LOCAL
    REAL(SP), DIMENSION(2) :: tarray
!!$ REAL(SP)               :: etime

!!$ cpu  = REAL(etime(tarray), DP)
    cpu  = REAL(etime1(tarray), DP)
    user = REAL(tarray(1), DP)
    sys  = REAL(tarray(2), DP)

  END SUBROUTINE cpu_second
! -----------------------------------------------------------------------

! -----------------------------------------------------------------------
  SUBROUTINE wall_second(wall, jd_now)

    USE messy_main_timer, ONLY: julian_day

    IMPLICIT NONE

    INTRINSIC :: REAL, DATE_AND_TIME 

!  -------------------------------
!  returns elapsed wall clock time
!  -------------------------------
!  DATE_AND_TIME(values = t_start)
!  1 = year,
!  2 = month,
!  3 = day,
!  4 = time difference in minutes,
!  5 = hours,
!  6 = minutes,
!  7 = seconds,
!  8 = milliseconds

! I/O
    REAL(DP), INTENT(OUT)  :: wall
    REAL(DP), INTENT(OUT)  :: jd_now

! LOCAL
    INTEGER, DIMENSION(8)      :: t_start
    INTEGER, DIMENSION(8)      :: t_now
    LOGICAL,              SAVE :: lfirst = .TRUE.
    REAL(DP),             SAVE :: jd_start

    IF (lfirst) THEN
       CALL DATE_AND_TIME(values=t_start)
       jd_start = julian_day( &
            (REAL(t_start(3), DP) +  &              ! day
            REAL(t_start(5), DP)/24.0_DP + &        ! hours -> days
            REAL(t_start(6), DP)/1440.0_DP + &      ! minutes -> days
            REAL(t_start(7), DP)/86400.0_DP + &     ! seconds -> days
            REAL(t_start(8), DP)/86400000.0_DP ) &  ! milliseconds -> days
            , t_start(2), t_start(1) )
       lfirst = .FALSE.
    END IF

    CALL DATE_AND_TIME(values=t_now)
    jd_now = julian_day( &
         (REAL(t_now(3), DP) +  &                   ! day
         REAL(t_now(5), DP)/24.0_DP + &             ! hours -> days
         REAL(t_now(6), DP)/1440.0_DP + &           ! minutes -> days
         REAL(t_now(7), DP)/86400.0_DP + &          ! seconds -> days
         REAL(t_now(8), DP)/86400000.0_DP ) &       ! milliseconds -> days
         , t_now(2), t_now(1) )

    wall = (jd_now - jd_start) * 86400.0_DP         ! days -> seconds

    jd_now = (jd_now - 2457023.5_dp)                ! -> days from 01-01-2015 00:00:00

  END SUBROUTINE wall_second
! -----------------------------------------------------------------------

! -------------------------------------------------------------------
  SUBROUTINE main_qtimer_read_nml_ctrl(status, iou)

! MODULE ROUTINE (CORE)
!
! READ NAMELIST, CHECK IT, AND INITIALIZE GLOBAL VARIABLES
!
! Author: Patrick Joeckel, MPICH, May 2005

    USE messy_main_tools, ONLY: read_nml_open, read_nml_check, read_nml_close

    IMPLICIT NONE

! I/O
    INTEGER, INTENT(OUT) :: status ! error status
    INTEGER, INTENT(IN)  :: iou    ! logical I/O unit

    NAMELIST /CTRL/ QTIME, QCLOCK, QFRAC

! LOCAL
    CHARACTER(LEN=*), PARAMETER :: substr = 'main_qtimer_read_nml_ctrl'
    LOGICAL                     :: lex          ! file exists ?
    INTEGER                     :: fstat        ! file status

! INITIALIZE
    status = 1 ! ERROR

! INITIALIZE GLOBAL CONTROL VARIABLES
! -> DEFAULT VALUES ARE SET AT DECLARATION ABOVE

    CALL read_nml_open(lex, substr, iou, 'CTRL', modstr)
    IF (.not.lex) RETURN    ! <modstr>.nml does not exist

    READ(iou, NML=CTRL, IOSTAT=fstat)
    CALL read_nml_check(fstat, substr, iou, 'CTRL', modstr)
    IF (fstat /= 0) RETURN  ! error while reading namelist

! CHECK NAMELIST
    SELECT CASE(TRIM(QCLOCK))
    CASE('wall','cpu','user','sys')
! OK
    CASE DEFAULT
       WRITE(*,*) &
            '*** ERROR: UNKNOWN CLOCK SELECTED: '//QCLOCK
       status = 2
       RETURN
    END SELECT

    CALL read_nml_close(substr, iou, modstr)

    status = 0  ! no ERROR

  END SUBROUTINE main_qtimer_read_nml_ctrl
! -------------------------------------------------------------------

! -------------------------------------------------------------------
  SUBROUTINE deep_thought(n)

    IMPLICIT NONE
    INTRINSIC :: MOD, ACHAR

! I/O
    INTEGER, INTENT(IN) :: n

! LOCAL
    INTEGER, PARAMETER :: dt = 42

    INTEGER, PARAMETER, DIMENSION(75) :: p01 = (/ &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,   & 
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,   &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,   &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p02 = (/ &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,    &
         32,32,32,32,32,32,32,111,111,111,111,56,56,56,56,56,56,56,   &
         56,56,56,56,56,111,111,111,111,32,32,32,32,32,32,32,32,32,   &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p03 = (/ &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,    &
         32,32,32,111,111,56,56,56,56,56,56,56,56,56,56,56,56,56,56,  &
         56,56,56,56,56,56,56,56,56,56,111,32,32,32,32,32,32,32,32,   &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p04 = (/ &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,    &
         111,111,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,  &
         56,56,56,56,56,56,56,56,56,56,56,56,56,111,32,32,32,32,32,   &
         32,32,32,32,111,56,32,32,32,56,56,32,111,56,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p05 = (/ &
         32,32,32,111,32,56,32,111,111,32,32,32,32,32,32,32,32,111,   &
         56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,    &
         56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,111,32,   &
         32,32,32,32,32,32,56,56,32,56,56,32,56,56,111,56,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p06 = (/ &
         111,111,32,56,32,56,32,34,56,32,32,32,32,32,32,111,56,56,56,  &
         56,56,56,56,56,56,32,32,32,32,56,56,56,56,56,56,56,56,56,56,  &
         56,56,56,32,32,32,32,56,56,56,56,56,56,56,56,56,111,32,32,32, &
         32,32,32,32,56,56,56,111,56,56,111,56,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p07 = (/ &
         34,56,56,56,56,56,56,111,56,32,32,32,32,32,111,56,56,56,56,56, &
         56,56,56,56,32,32,32,32,32,32,56,56,56,56,56,56,56,56,56,56,   &
         56,32,32,32,32,32,32,56,56,56,56,56,56,56,56,56,56,111,32,     &
         32,32,32,56,56,56,56,56,56,56,56,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p08 = (/ &
         32,32,56,56,56,56,56,56,56,32,32,32,32,56,56,56,56,56,56,56,   &
         56,56,56,56,32,32,32,32,32,32,56,56,56,56,56,56,56,56,56,56,   &
         56,32,32,32,32,32,32,56,56,56,56,56,56,56,56,56,56,56,56,56,   &
         56,56,56,56,56,56,56,56,56,56,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p09 = (/ &
         32,32,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,   &
         56,56,56,56,56,32,32,32,32,56,56,56,56,56,56,56,56,56,56,56,   &
         56,56,32,32,32,32,56,56,56,56,56,56,56,56,56,56,56,56,56,56,   &
         32,32,34,34,34,56,56,56,32,32,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p10 = (/ &
         32,32,32,34,56,56,56,34,34,34,34,56,56,56,56,56,56,56,56,56,   &
         56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,   &
         56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,   &
         32,32,32,32,32,34,56,56,56,32,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p11 = (/ &
         32,32,32,32,56,56,56,32,32,32,111,56,56,56,56,56,56,56,56,56,  &
         56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,   &
         56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,   &
         56,32,32,32,32,32,34,56,56,56,111,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p12 = (/ &
         32,32,32,111,56,56,34,32,32,32,56,56,56,56,56,56,56,56,56,56,  &
         56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,   &
         56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,   &
         56,32,32,32,32,32,32,32,56,56,56,111,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p13 = (/ &
         32,32,32,56,56,56,32,32,32,32,56,56,56,56,56,56,56,56,56,56,   &
         56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,   &
         56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,34,34,56,56,56,   &
         56,56,56,111,111,111,111,111,56,56,56,56,111,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p14 = (/ &
         32,32,111,56,56,56,111,111,111,111,56,56,56,56,56,32,32,56,   &
         56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,  &
         56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,32,32,111,    &
         56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p15 = (/ &
         32,32,56,56,56,56,56,56,56,56,34,56,56,56,56,32,32,32,56,56,   &
         56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,   &
         56,56,56,56,56,56,56,56,56,56,56,56,32,32,32,32,32,56,56,56,   &
         56,34,34,34,34,34,34,34,34,32,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p16 = (/ &
         32,34,34,34,34,32,32,32,32,32,32,32,56,56,56,56,32,32,32,32,   &
         34,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,   &
         56,56,56,56,56,56,56,56,56,34,32,32,32,32,32,32,111,56,56,56,  &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p17 = (/ &
         32,32,32,32,32,32,32,32,32,32,32,32,34,56,56,56,111,32,32,32,   &
         32,32,34,34,34,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56, &
         56,56,34,56,56,34,32,32,32,32,32,32,32,32,32,56,56,56,32,32,32, &
         32,32,32,32,32,32,32,32,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p18 = (/ &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,56,56,56,111,32,32,   &
         32,32,32,32,32,32,32,32,34,56,56,34,34,56,56,56,56,56,56,34,34, &
         34,34,32,32,32,32,32,32,32,32,32,32,32,111,56,56,56,32,32,32,   &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p19 = (/ &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,56,56,56,56,111,   &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,   &
         32,32,32,32,32,32,32,32,32,32,32,32,111,56,56,56,34,32,32,32,   &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p20 = (/ &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,56,56,56,   &
         56,111,32,32,32,32,32,32,111,56,56,56,56,56,56,111,34,56,56,   &
         56,56,111,32,32,32,32,32,32,32,32,111,56,56,56,56,32,32,32,   &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p21 = (/ &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,56,   &
         56,56,56,56,111,111,32,32,32,32,32,34,34,56,56,56,56,111,56,   &
         56,56,56,56,111,32,32,32,111,56,56,56,56,34,34,32,32,32,32,   &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p22 = (/ &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,   &
         32,34,34,56,56,56,56,56,111,111,111,111,32,32,34,56,56,56,111, &
         56,56,56,56,56,56,56,56,56,34,34,34,32,32,32,32,32,32,32,32,   &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p23 = (/ &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,   &
         32,32,32,32,34,34,56,56,56,56,56,56,56,111,111,32,56,56,56,    &
         56,56,56,56,56,56,56,32,32,32,32,32,32,32,32,32,32,32,32,32,   &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p24 = (/ &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,   &
         32,32,32,32,32,32,32,32,32,32,32,32,34,34,34,34,56,56,56,56,   &
         56,56,56,56,56,56,56,32,32,32,32,32,32,32,32,32,32,32,32,32,   &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p25 = (/ &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,   &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,56,56,56,56,   &
         56,56,56,56,56,56,56,56,32,32,32,32,32,32,32,32,32,32,32,32,   &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p26 = (/ &
         32,32,32,32,32,68,111,110,39,116,32,112,97,110,105,99,32,33,   &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,56,   &
         56,56,56,56,56,56,56,56,56,34,32,32,32,32,32,32,32,32,32,32,   &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p27 = (/ &
         32,32,32,32,32,84,104,101,32,97,110,115,119,101,114,32,105,   &
         115,32,52,50,32,46,46,46,32,32,32,32,32,32,32,32,32,32,32,    &
         32,32,34,56,56,56,34,34,34,34,32,32,32,32,32,32,32,32,32,     &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(75) :: p28 = (/ &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,   &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,   &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,   &
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 /)
    
    INTEGER, PARAMETER, DIMENSION(2100) :: p = (/ &
         p01,p02,p03,p04,p05,p06,p07,p08,p09,p10,p11,p12,p13,p14, &
         p15,p16,p17,p18,p19,p20,p21,p22,p23,p24,p25,p26,p27,p28/)

    IF (n == 0) RETURN
    IF (MOD(n, dt) == 0) WRITE(*,'(75(a))') ACHAR(p)
  
  END SUBROUTINE deep_thought
! -------------------------------------------------------------------

! -------------------------------------------------------------------
! ETIME in standard Fortran.
  Real(SP) Function etime1(time)
    Real time(2)
    Call Cpu_Time(etime1)
    time(1) = etime1
    time(2) = 0
  End Function etime1
! -------------------------------------------------------------------

! **********************************************************************
END MODULE messy_main_qtimer
! **********************************************************************
